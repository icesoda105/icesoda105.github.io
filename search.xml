<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>集合、JVM、JMM</title>
      <link href="/icesoda105.github.io/2023/03/16/%E9%9B%86%E5%90%88%E3%80%81JVM%E3%80%81JMM/"/>
      <url>/icesoda105.github.io/2023/03/16/%E9%9B%86%E5%90%88%E3%80%81JVM%E3%80%81JMM/</url>
      
        <content type="html"><![CDATA[<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><ul><li><p>接口继承关系和实现</p><p>集合类存放于Java.util包中，有三种：<strong>list（列表包含Queue）、set（集）、和map（映射）</strong>。</p><ol><li><p>Collection：Collection是集合List、Set、Queue的最基本的接口</p></li><li><p>Iterator：迭代器，可以通过迭代器遍历集合中的数据</p></li><li><p>Map：是映射表的基础接口</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303160851780.png" alt="image-20230316085134585"></p></li></ol></li><li><p>集合框架</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303160913795.png" alt="集合框架"></p></li><li><p>List</p><p>Java的List是非常常用的数据类型。</p><p>List是有序的Collection。</p><p>Java List一共三个实现类：</p><ol><li>ArrayList</li><li>Vector</li><li>LinkedList</li></ol><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303160920478.png" alt="image-20230316092003338"></p><ul><li><p>ArrayList（数组）</p><p>ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时，需要增加存储能力，就要将已经有数组的数据赋值到新的存储空间中。当从ArrayList的中间位置插入或删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p></li><li><p>Vector （数组实现、线程同步）</p><p>Vector和ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。</p></li><li><p>LinkedList （链表）</p><p>LinkedList是链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，它还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当做堆栈、队列和双向队列使用。</p></li></ul></li><li><p>Set</p><p>Set注重<strong>独一无二</strong>的性质，该体系集合用于<strong>存储无序</strong>（存入和取出的顺序不一定相同）元素，<strong>值不能重复</strong>。对象的相等性本质是对象<strong>hashCode值</strong>（java是依据对象的<strong>内存地址</strong>计算出的此序号）判断的，如果想要让两个不同的对象视为相等的，就必须覆盖Object的<strong>hashCode方法和equals方法</strong>。</p><ul><li><p>HashSet（哈希表）</p><p>  <img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303160934012.png" alt="image-20230316093411874"></p><p>  哈希表边存放的是哈希值。HashSet存储元素的顺序并不是按照存入时的顺序（和List显然不同），而是按照哈希值来存的，所以取数据也是按照哈希值取。元素的哈希值是通过元素的hashcode方法来获取的。HashSet首先判断两个元素的哈希值，如果哈希值一样，接着会比较equals方法，如果equals结果为true，HashSet就视为同一个元素。反之，不是同一个元素。</p><p>  哈希值相同的但equals为false的元素是怎么存储的呢，就是在同样的哈希值下顺延，也就是哈希一样的存一列。</p><p>  <img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303160941424.png" alt="image-20230316094152340"></p><p>  HashSet通过hashcode值来确定元素在内存中的位置，一个hashcode位置上可以存放多个元素。</p></li><li><p>TreeSet（二叉树）</p><ol><li>TreeSet()是使用二叉树的原理对新add()的对象按照指定的顺序排序（升序、降序），每增加一个对象都会进行排序，将对象插到二叉树的指定位置。</li><li>Intger和String对象都可以进行默认的TreeSet排序，而自定义类的对象是不可以的，自己定义的类必须实现Comparable接口，并且覆写相应的compareTo函数，才可以正常使用。</li><li>在覆写compare()函数时，要返回相应的值才能使TreeSet按照一定的规则来排序</li><li>比较此对象与指定对象的顺序，如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。</li></ol></li><li><p>LinkedHashSet（HashSet + LinkedHashMap）</p><p>  对于LinkedHashSet而言，它既基于HashSet、又基于LinkedHashMap来实现的。LinkedHashSet底层使用LinkedHashMap来保存所有的元素，它继承于HashSet,其所有的方法操作上又与HashSet相同，因此LinkedHashSet的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个LinkedHashMap来实现，在相关操作上与父类HashSet的操作相同，直接调用父类的HashSet的方法即可。</p></li></ul></li><li><p>Map</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303161000992.png" alt="image-20230316100005862"></p><ul><li><p>HashMap（数组+链表+红黑树）</p><p>HashMap根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值。因而具有很快的访问速度，但遍历顺序却是不确定的。HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果满足线程安全，可以用Collection的synchronizeMap方法使Hashmap具有线程安全的能力，或者使用ConcurrentHashMap。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303161005975.png" alt="image-20230316100510898"></p><p>大方向上，HashMap里面是一个数组，然后数组中每个元素是一个单向链表。上图中，每个绿色的实体是嵌套类Entry的实例，Entry包含四个属性：key,value,hash值和用于单向链表的next。</p><ol><li><p>capacity：当前数组容量，始终保持2^n，可以扩容，扩容后数组大小为当前的2倍。</p></li><li><p>loadFactor：负载因子，默认为0.75</p></li><li><p>threshold：扩容的阈值，等于capacity * loadFactory</p></li></ol><p>Java8对HashMap进行了一些修改，最大的不同就是利用了红黑树，所以其右数组+链表+红黑树组成。</p><p>在查找的时候根据哈希值我们能快速定位到数组的具体下标，但后序需要顺着链表一个个比较下去才能找到需要的，时间复杂度取决于链表长度，为O（n）。为降低开销当链表元素超过八个，会将其转换为红黑树，降低复杂度为O（logN）。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303161016765.png" alt="image-20230316101649686"></p></li><li><p>ConcurrentHashMap</p><p>Segment段</p><p>ConcurrentHashMap和hashmap思路是差不多的，但是因为它支持并发操作，所以复杂一些。整个ConcurrentHashMap由一个个Segment组成，Segment代表部分、一段，很多地方描述为分段锁。下面用”槽”来代表。</p><p>线程安全</p><p>Segment继承ReentrantLock加锁</p><p>简单理解：ConcurrentHashMap是一个Segment数组，Segment通过继承ReentrantLock来进行加锁，所以每次需要加锁的操作锁住的是一个Segment，这样只要保证每个Segment是线程安全的，也就实现了全局的线程安全。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303161021829.png" alt="image-20230316102154751"></p></li><li><p>HashTable (线程安全)</p><p>HashTable是遗留类，很多映射常用功能与HashMap类似，不同的是它继承自Dictionary类，并且线程安全的，任一时间只有一个线程能写HashTable,并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。HashTable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</p></li><li><p>TreeMap（可排序）</p><p>TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。</p><p>如果使用排序的映射，建议使用TreeMap。</p><p>在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparable，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p></li><li><p>LinkHashMap（记录插入顺序）</p><p>LinkHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p></li></ul></li></ul><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><ul><li><p>基本概念：JVM是可运行Java代码的假象计算机，包括</p><p><strong>一套字节码指令集</strong></p><p><strong>一组寄存器</strong></p><p><strong>一个栈</strong></p><p><strong>一个垃圾回收</strong></p><p><strong>堆</strong></p><p><strong>一个存储方法域。</strong></p><p>JVM是运行在操作系统之上的，它与硬件没有直接的交互。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303161100857.png" alt="JVM"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JMM </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/icesoda105.github.io/2023/03/15/hello-world/"/>
      <url>/icesoda105.github.io/2023/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博文更新测试</title>
      <link href="/icesoda105.github.io/2023/03/15/hexo%E5%8D%9A%E6%96%87%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95/"/>
      <url>/icesoda105.github.io/2023/03/15/hexo%E5%8D%9A%E6%96%87%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/icesoda105.github.io/2023/03/14/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/icesoda105.github.io/2023/03/14/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>需求案例：</p><ul><li><p>披萨的项目：要便于披萨种类的扩展，便于维护</p><ol><li>披萨的种类很多（eg: GreekPizz、CheesePize等）</li><li>披萨的制作有 prepare、bake、cut、box</li><li>完成披萨店订购功能</li></ol></li><li><p>传统的方式完成：</p><p>思路：</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303141800936.png" alt="image-20230314180040868"></p><p>编写OrderPizza.java 去订购需要的各种Pizza</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">   <span class="comment">// 构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 订购披萨的类型</span></span><br><span class="line">      String orderType;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         orderType = getType();</span><br><span class="line">         <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">GreekPizza</span>();</span><br><span class="line">            pizza.setName(<span class="string">&quot; 希腊披萨 &quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">CheesePizza</span>();</span><br><span class="line">            pizza.setName(<span class="string">&quot; 奶酪披萨 &quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">PepperPizza</span>();</span><br><span class="line">            pizza.setName(<span class="string">&quot; 胡椒披萨 &quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 输出pizza制作过程</span></span><br><span class="line">         pizza.prepare();</span><br><span class="line">         pizza.bake();</span><br><span class="line">         pizza.cut();</span><br><span class="line">         pizza.box();</span><br><span class="line">         </span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传统方式的优缺点</p><ol><li><p>简单易操作</p></li><li><p>违反了设计模式的OCP原则，即对扩展开放，对修改关闭</p></li><li><p>比如我们这是要新增一个Pizza的种类（Pepper披萨）,需要修改如上</p><p>如果我们增加一个Pizza类，只要是订购Pizza的代码都需要修</p></li><li><p>修改代码可以接受，但是如果我们在其他的地方也有创建Pizza的代码，就意味着，也需要修改，而创建Pizza的代码，往往有多处。</p></li><li><p>思路：把创建Pizza对象封装到一个类中，这样我们有新的Pizza种类时，只需要修改该类即可，其他有创建到Pizza对象的代码就不需要修改了&#x3D;&gt;简单工厂模式。</p></li></ol></li><li><p>基本介绍</p><ol><li>简单工厂模式是使用创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。</li><li>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为</li><li>在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会用到工厂模式。</li></ol></li><li><p>使用简单工厂模式</p><p>简单工厂模式的设计方案：定义一个可以实例化Pizza对象的类，封装创建对象的代码。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303150850206.png" alt="image-20230315085032097"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">   <span class="comment">// 构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 订购披萨的类型</span></span><br><span class="line">      String orderType;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         orderType = getType();</span><br><span class="line">         <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">GreekPizza</span>();</span><br><span class="line">            pizza.setName(<span class="string">&quot; 希腊披萨 &quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">CheesePizza</span>();</span><br><span class="line">            pizza.setName(<span class="string">&quot; 奶酪披萨 &quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> <span class="title class_">PepperPizza</span>();</span><br><span class="line">            pizza.setName(<span class="string">&quot; 胡椒披萨 &quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 输出pizza制作过程</span></span><br><span class="line">         pizza.prepare();</span><br><span class="line">         pizza.bake();</span><br><span class="line">         pizza.cut();</span><br><span class="line">         pizza.box();</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 定义一个简单工厂对象</span></span><br><span class="line">   SimpleFactory simpleFactory;</span><br><span class="line">   <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">(SimpleFactory simpleFactory)</span> &#123;</span><br><span class="line">      setFactory(simpleFactory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFactory</span><span class="params">(SimpleFactory simpleFactory)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">orderType</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用户输入的</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.simpleFactory = simpleFactory; <span class="comment">// 设置简单工厂对象</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         orderType = getType();</span><br><span class="line">         pizza = <span class="built_in">this</span>.simpleFactory.creatPizza(orderType);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 输出pizza</span></span><br><span class="line">         <span class="keyword">if</span> (pizza != <span class="literal">null</span>) &#123; <span class="comment">// 订购成功</span></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; 订购披萨失败 &quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 写一个方法 可以获取客户希望订购的披萨种类</span></span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">BufferedReader</span> <span class="variable">strin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in))</span><br><span class="line">         System.out.println(<span class="string">&quot;input pizza 种类:&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strin.readLine();</span><br><span class="line">         <span class="keyword">return</span> str;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><ul><li><p>披萨项目新需求：客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪披萨、北京的胡椒披萨 、 伦敦的奶酪披萨</p></li><li><p>思路1：使用简单工厂模式，创建不同的简单工厂类，比如BJPizzaSimpleFactory、LDPizzaSimpleFactory等，从当前这个案例来说，也是可以的但是考虑到项目的规模，以及软件的可维护性、可扩展性不是很好。</p></li><li><p>思路2：使用工厂方法模式：</p><ol><li>设计方案：将披萨项目的实例化功能呢抽象成抽象方法，在不同的口味点餐子类中具体实现。</li><li>定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</li></ol></li><li><p>思路分析图解：</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303151418666.png" alt="image-20230315141840437"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">   <span class="comment">// 定义一个抽象方法，creatPizza，让各个工厂子类自己实现</span></span><br><span class="line">   <span class="keyword">abstract</span> Pizza <span class="title function_">creatPizza</span><span class="params">(String orderType)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 订购披萨的类型</span></span><br><span class="line">      String orderType;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         orderType = getType();</span><br><span class="line">         <span class="comment">// 抽象方法，由工厂子类完成</span></span><br><span class="line">         pizza = creatPizza(orderType);</span><br><span class="line">         <span class="comment">// 输出pizza制作过程</span></span><br><span class="line">         pizza.prepare();</span><br><span class="line">         pizza.bake();</span><br><span class="line">         pizza.cut();</span><br><span class="line">         pizza.box();</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 写一个方法 可以获取客户希望订购的披萨种类</span></span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">BufferedReader</span> <span class="variable">strin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in))</span><br><span class="line">         System.out.println(<span class="string">&quot;input pizza 种类:&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strin.readLine();</span><br><span class="line">         <span class="keyword">return</span> str;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BJOrderPizza</span> <span class="keyword">extends</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   Pizza <span class="title function_">creatPizza</span><span class="params">(String orderType)</span> &#123;</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">         pizza = <span class="keyword">new</span> <span class="title class_">BJCheesePizza</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">         pizza = <span class="keyword">new</span> <span class="title class_">BJPepperPizza</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> pizza;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDOrderPizza</span> <span class="keyword">extends</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   Pizza <span class="title function_">creatPizza</span><span class="params">(String orderType)</span> &#123;</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">         pizza = <span class="keyword">new</span> <span class="title class_">LDCheesePizza</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">         pizza = <span class="keyword">new</span> <span class="title class_">LDPepperPizza</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> pizza;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul><li><p>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类。</p></li><li><p>抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。</p></li><li><p>从设计层面上看，抽象工厂模式就是对简单工厂模式的改进（或者称为进一步的抽象）。</p></li><li><p>将工厂抽象成两层，AbsFactory和具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇，更利于代码的维护和扩展。</p></li><li><p>类图：</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303151438924.png" alt="image-20230315143838802"></p></li><li><p>应用实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个抽象工厂模式的抽象层（接口）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbsFactory</span> &#123;</span><br><span class="line">   <span class="comment">// 让下面的工厂子类来具体实现</span></span><br><span class="line">   <span class="keyword">public</span> Pizza <span class="title function_">creatPizza</span><span class="params">(String orderType)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BJFactory</span> <span class="keyword">implements</span> <span class="title class_">AbsFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Pizza <span class="title function_">creatPizza</span><span class="params">(String orderType)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;使用的是抽象工厂模式&quot;</span>);</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">         pizza = <span class="keyword">new</span> <span class="title class_">BJCheesePizza</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">         pizza = <span class="keyword">new</span> <span class="title class_">BJPepperPizza</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> pizza;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDFactory</span> <span class="keyword">implements</span> <span class="title class_">AbsFactory</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Pizza <span class="title function_">creatPizza</span><span class="params">(String orderType)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;使用的是抽象工厂模式&quot;</span>);</span><br><span class="line"><span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (orderType.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">LDCheesePizza</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="title class_">LDPepperPizza</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderPizza</span> &#123;</span><br><span class="line">   AbsFactory factory;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OrderPizza</span><span class="params">(AbsFactory factory)</span> &#123;</span><br><span class="line">      setFactory(factory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setFactory</span><span class="params">(AbsFactory factory)</span> &#123;</span><br><span class="line">      <span class="type">Pizza</span> <span class="variable">pizza</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">orderType</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 用户输入</span></span><br><span class="line">      <span class="built_in">this</span>.factory = factory;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         orderType = getType();</span><br><span class="line">         <span class="comment">// factory可能是北京的工厂子类也可能是伦敦的工厂子类</span></span><br><span class="line">         pizza = factory.creatPizza(orderType);</span><br><span class="line">         <span class="keyword">if</span> (pizza != <span class="literal">null</span>) &#123; <span class="comment">// 订购ok</span></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;订购失败&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">BufferedReader</span> <span class="variable">strin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">         System.out.println(<span class="string">&quot;input pizza 种类：&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> strin.readLine();</span><br><span class="line">         <span class="keyword">return</span> str;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工厂模式在JDK-Calender应用的源码分析</p><p>JDK中的Calender类中，就使用了简单工厂模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//getInstance是Calendar的静态方法</span></span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;年:&quot;</span> + cal.get(Calendar.YEAR));</span><br><span class="line">      System.out.println(<span class="string">&quot;月:&quot;</span> + cal.get(Calendar.MONTH) + <span class="number">1</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;日:&quot;</span> + cal.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">      System.out.println(<span class="string">&quot;时:&quot;</span> + cal.get(Calendar.HOUR_OF_DAY));</span><br><span class="line">      System.out.println(<span class="string">&quot;分:&quot;</span> + cal.get(Calendar.MINUTE));</span><br><span class="line">      System.out.println(<span class="string">&quot;秒:&quot;</span> + cal.get(Calendar.SECOND));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calendar</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> creatCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 根据TimeZone,Locale创建对象的实例</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title function_">creatCalendar</span><span class="params">(TimeZone zone,Locale aLocale)</span> &#123;</span><br><span class="line">      <span class="type">CalendarProvider</span> <span class="variable">provider</span> <span class="operator">=</span> LocaleProviderAdapter.getAdapter(CalendarProvider.class,aLocale).getCalendarProvider();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (provider != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> provider.getInstance(zone,aLocale);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">caltype</span> <span class="operator">=</span> aLocale.getUnicodeLocaleType(<span class="string">&quot;ca&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span> (caltype != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (caltype) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&quot;buddhist&quot;</span>:</span><br><span class="line">                  cal = <span class="keyword">new</span> <span class="title class_">BuddhistCalendar</span>(zone,aLocale);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&quot;japanese&quot;</span>:</span><br><span class="line">                  cal = <span class="keyword">new</span> <span class="title class_">JapaneseImperialCalendar</span>(zone,aLocale);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&quot;gregory&quot;</span>:</span><br><span class="line">                  cal = <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(zone,aLocale);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cal == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (aLocale.getLanguage() == <span class="string">&#x27;th&#x27;</span> &amp;&amp; aLocale.getCountry() == <span class="string">&#x27;TH&#x27;</span>) &#123;</span><br><span class="line">            cal = <span class="keyword">new</span> <span class="title class_">BuddhistCalendar</span>(zone,aLocale);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aLocale.getVariant() == <span class="string">&#x27;JP&#x27;</span> &amp;&amp; aLocale.getLanguage() == <span class="string">&#x27;ja&#x27;</span> &amp;&amp; aLocale.getCountry() == <span class="string">&#x27;JP&#x27;</span>) &#123;</span><br><span class="line">            cal = <span class="keyword">new</span> <span class="title class_">JapaneseImperialCalendar</span>(zone,aLocale);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cal = <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(zone,aLocale);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> cal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工厂模式小结</p><ol><li>意义：将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展性和维护性。</li><li>三种工厂模式：简单工厂模式、工厂方法模式、抽象工厂模式</li><li>设计模式的依赖抽象规则<ol><li>创建对象实例时，不要直接new类，而是把这个new类的动作放进一个工厂的方法中，并返回。也有说，变量不要直接持有具体类的引用</li><li>不要让类继承具体类，而是继承抽象类或者是实现interface接口</li><li>不要覆盖基类中已经实现的方法</li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="/icesoda105.github.io/2023/03/14/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/icesoda105.github.io/2023/03/14/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h4><ul><li>设计模式是 程序员在面对同类软件工程设计问题所总结出来的经验，模式不是代码，而是某类问题的通用解决方案。设计模式代表了最佳的实践。</li><li>本质是提高软件的维护性，通用性和扩展性，并降低软件的复杂度。</li><li>不局限语言。</li></ul><h4 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h4><p>设计模式分为三种类型，供23种：</p><ul><li>创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式</li><li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</li><li>行为性模式：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式</li></ul><h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><ul><li><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（静态方法）。</p></li><li><p>比如Hibernate的SessionFactory,它充当数据存储源的代理，并负责创建Session对象，SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这是就会使用到单例模式。</p></li><li><p>单例设计模式的八种方式</p><ul><li><p>饿汉式（静态常量）</p></li><li><p>饿汉式（静态代码块）</p></li><li><p>懒汉式（线程不安全）</p></li><li><p>懒汉式（线程安全，同步方法）</p></li><li><p>懒汉式（线程安全，同步代码块）</p></li><li><p>双重检查</p></li><li><p>静态内部类</p></li><li><p>枚举</p></li></ul></li><li><p>饿汉式（静态常量）</p><p>应用实例，步骤：</p><ol><li>构造器私有化（防止new）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法，getInstance</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest01</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// test</span></span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉式（静态变量）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="comment">// 1.构造器私有化，外部能new</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">   <span class="comment">// 2.本类内部创建对象实例</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">   <span class="comment">// 3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>优点：写法简单，在类装载的时候就完成实例化，避免了线程同步问题。</li><li>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果，如果从始至终未使用过这个实例，则会造成内存的崩溃。</li><li>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载的时候就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果。</li><li>结论：这种单例模式可用，但可能造成内存浪费。</li></ul></li><li><p>饿汉式（静态常量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest02</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// test</span></span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉式（静态代码块）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="comment">// 1.构造器私有化，外部能new</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">   <span class="comment">// 2.本类内部创建对象实例</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="comment">// 在静态代码块中，创建单例对象</span></span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点说明：</p><ul><li>这种方法和上面类似，只是将实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点一样</li><li>结论：这种单例模式可用，但可能造成内存浪费。</li></ul></li><li><p>懒汉式（线程不安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest03</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;懒汉式1，线程不安全！&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式（线程不安全）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 提供一个公有的公用方法，当使用到该方法时，才会去创建instance</span></span><br><span class="line">   <span class="comment">// 即懒汉式</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">         instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点说明：</p><ul><li>起到了lazy Loading的效果，但是只能在单线程下使用</li><li>如果在多线程下，一个线程进入了 if (instance &#x3D;&#x3D; null) 判断语句块，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以多线程环境下不可使用。</li><li>结论：在实际开发中，不要使用。</li></ul></li><li><p>懒汉式（线程安全，同步方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest04</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;懒汉式2，线程安全~&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 提供一个静态的公用方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">   <span class="comment">// 即懒汉式</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">         instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>解决了线程安全问题</li><li>效率太低，每个线程在想获得类的实例的时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行。方法进行同步效率太低。</li><li>结论：在实际开发中，不推荐</li></ul></li><li><p>懒汉式（线程安全，同步代码块）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest05</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;懒汉式3，线程安全~&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式（线程安全，同步代码块）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐使用</p></li><li><p>双重检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest06</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;双重检查！&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双重检查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  提供一个静态的公有方法，加入双重检查代码，解决线程安全问题，同时解决懒加载问题</span></span><br><span class="line"><span class="comment">    *  同时保证了效率、推荐使用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">               instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 if (instance &#x3D;&#x3D; null)这样就保证线程安全了</li><li>这样实例化代码只用执行一次，后面再次访问时，贩毒案 if (instance &#x3D;&#x3D; null)，直接return实例化对象，也避免了反复进行方法同步。</li><li>线程安全、延迟加载、效率较高</li><li>结论：在实际开发中，推荐使用</li></ul></li><li><p>静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest07</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;使用静态内部类完成单例模式&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态内部类完成，推荐使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 构造器私有化</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 写一个静态内部类，该类中有一个静态属性Singleton</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInstance</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>此方式采用了类加载的机制来保证初始化实例时只有一个线程</li><li>静态内部类方式在Singleton类被加载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载Sing了Instance类，从而完成Singleton的实例化</li><li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</li><li>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。</li><li>结论：推荐使用。</li></ul></li><li><p>枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest08</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.INSTANCE();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.INSTANCE();</span><br><span class="line"></span><br><span class="line">      System.out.println(instance == instance2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());</span><br><span class="line">      System.out.println(<span class="string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());</span><br><span class="line">      </span><br><span class="line">      instance.sayOK();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用枚举，可以实现单例，推荐使用</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   INSTANCE; <span class="comment">// 属性</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOK</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;ok~&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点</p><ul><li>借助JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，还能防止反序列化重新创建新的对象。</li><li>推荐使用</li></ul></li><li><p>单例模式在JDK应用的源码分析</p><ol><li>JDK中，java.lang.Runtime就是经典的单例模式（饿汉式）</li><li>源码分析：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> currentRuntime;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式注意事项和细节说明</p><ol><li>单例模式保证了系统内部中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</li><li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</li><li>单例模式使用的场景，需要频繁地进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多（即：重量级对象），但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML类图</title>
      <link href="/icesoda105.github.io/2023/03/14/UML%E7%B1%BB%E5%9B%BE/"/>
      <url>/icesoda105.github.io/2023/03/14/UML%E7%B1%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><p>UML · 统一建模语言，一种用于软件系统分析设计的语言工具，用于帮助软件开发人员进行思考和记录思路的结果。</p></li><li><p>UML本身是一套符号的规定，就像数学符号和化学符号一样，用于描述软件模型中的各个元素和他们之间的关系。比如类、接口、实现、泛化、依赖、组合、聚合等。如：</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140911246.png" alt="image-20230314091059053"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140916921.png" alt="image-20230314091628784"></p></li><li><p>使用UML来建模，常用的工具有Rational Rose,也可以使用一些插件来建模。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140917569.png" alt="image-20230314091758487"></p></li></ul><h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><ul><li>分类：<ol><li>用例图</li><li>静态结构图：类图、对象图、包图、组件图、部署图</li><li>动态行为图：交互图（时序图与协作图）、状态图、活动图</li></ol></li><li>说明：<ol><li>类图是描述类与类之间的关系的，是UML图中最核心的。</li><li>在讲解设计模式时，必然会使用类图</li></ol></li></ul><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><ul><li><p>用于描述系统中的类（对象）本身的组成和类（对象）之间的各种静态关系。</p></li><li><p>类之间的关系：<strong>依赖、泛化（继承）、实现、关联、聚合与组合</strong></p></li><li><p>类图简单举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140927461.png" alt="image-20230314092726383"></p><h4 id="类图——依赖关系"><a href="#类图——依赖关系" class="headerlink" title="类图——依赖关系"></a>类图——依赖关系</h4><p>​只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编译都通过不了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> &#123;</span><br><span class="line">   <span class="comment">// 类</span></span><br><span class="line">   <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span> &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> IDCard <span class="title function_">getIDCard</span><span class="params">(Integer personid)</span> &#123;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonDao</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​对应的类图：<img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140935839.png" alt="image-20230314093511751"></p><p>​小结：</p><ul><li>类中用到了对方</li><li>如果是类的成员属性</li><li>如果是方法的返回类型</li><li>是方法接收的参数类型</li><li>方法中使用到</li></ul><h4 id="类图——泛化关系"><a href="#类图——泛化关系" class="headerlink" title="类图——泛化关系"></a>类图——泛化关系</h4><p>​泛化关系实际上就是<strong>继承关系</strong>，它是<strong>依赖关系的特例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DapSupport</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Object id)</span> &#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> <span class="keyword">extends</span> <span class="title class_">DapSupport</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​对应的类图：</p><p>​<img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140943105.png" alt="image-20230314094343020"></p><p>​小结：</p><ul><li>泛化关系实际上就是继承关系</li><li>如果A继承了B，我们就说A和B存在泛化关系</li></ul><h4 id="类图——实现关系"><a href="#类图——实现关系" class="headerlink" title="类图——实现关系"></a>类图——实现关系</h4><p>​实现关系实际上就是A类实现B接口，<strong>他是依赖关系的特例</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> <span class="keyword">implements</span> <span class="title class_">PersonService</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​类图：</p><p>​<img src="C:/Users/dell/AppData/Roaming/Typora/typora-user-images/image-20230314094759590.png" alt="image-20230314094759590"></p><h4 id="类图——关联关系"><a href="#类图——关联关系" class="headerlink" title="类图——关联关系"></a>类图——关联关系</h4><ul><li><p>关联关系实际上就是类与类之间的联系，<strong>它是依赖关系的特例</strong></p></li><li><p>关联具有导航性，即双向关系或单向关系</p></li><li><p>关联具有多重性：</p><ol><li>1表示有且仅有一个</li><li>0…表示0个或者多个</li><li>0,1表示0个或者一个</li><li>n…m表示n到m个都可以</li><li>m…*表示至少m个</li></ol></li><li><p>单向一对一关系</p><p><code>public class Person &#123;</code></p><p>​<code>private IDCard card;</code></p><p><code>&#125;</code></p><p><code>public class IDCard &#123;&#125;</code></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140955225.png" alt="image-20230314095519107"></p></li><li><p>双向一对一关系</p><p><code>public class Person &#123;</code></p><p>​<code>private IDCard card;</code></p><p><code>&#125;</code></p><p><code>public class IDCard &#123;</code></p><p>​<code>private Person person;</code></p><p><code>&#125;</code></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140957026.png" alt="image-20230314095736914"></p></li></ul><h4 id="类图——聚合关系"><a href="#类图——聚合关系" class="headerlink" title="类图——聚合关系"></a>类图——聚合关系</h4><ul><li><p>聚合关系表示的是<strong>整体和部分的关系</strong>，<strong>整体与部分可以分开</strong>。<strong>聚合关系是关联关系的特例</strong>，所以它具有关联的<strong>导航性与多重性</strong>。</p></li><li><p>如：一台电脑由键盘、显示器、鼠标等组成；组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示。</p></li><li><p>应用实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Mouse mouse;</span><br><span class="line">   <span class="keyword">private</span> Monitor monitor;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonitor</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.monitor = monitor;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​<img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303141004942.png" alt="image-20230314100419854"></p><h4 id="类图——组合关系"><a href="#类图——组合关系" class="headerlink" title="类图——组合关系"></a>类图——组合关系</h4><ul><li><p>组合关系：也就是整体与部分的关系，但是<strong>整体和部分不可以分开</strong>。</p></li><li><p>案例如在程序中我们定义实体：Person与IDCard、Head,那么Head和Person就是组合，IDCard和Person就是聚合。</p></li><li><p>但是如果在程序中Person实体中定义了对IDCard进行级联删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合了。</p></li><li><p>应用案例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> IDCard card;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">Head</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Head</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span>&#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Head</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​对应的类图:</p><p>​<img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303141012670.png" alt="image-20230314101250571"></p><ul><li>应用案例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">   <span class="comment">// 鼠标可以和computer不能分离</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">Mouse</span> <span class="variable">mouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>();</span><br><span class="line">   <span class="comment">// 显示器可以和computer不能分离</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">Moniter</span> <span class="variable">moniter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Moniter</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setMoniter</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.moniter = moniter;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Moniter</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​对应的类图：</p><p>​<img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303141022899.png" alt="image-20230314102256779"></p>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪米特法则·合成复用原则</title>
      <link href="/icesoda105.github.io/2023/03/13/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99%C2%B7%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
      <url>/icesoda105.github.io/2023/03/13/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99%C2%B7%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><ul><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>又叫最少知道原则，一个类对自己依赖的类知道的越少越好。对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。<strong>对外除了提供的public方法，不对外泄漏任何信息。</strong></p></li><li><p>迪米特法则更简单的定义：只与直接的朋友通信。</p></li><li><p>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，即为朋友关系。耦合的方式有很多，依赖、管理啊、组合、聚合等。其中称出现<strong>成员变量，方法参数，方法返回值</strong>中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是陌生的类最好不要以局部变量的形式出现在类的内部。</p></li><li><p>应用实例：</p><p>一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 学校总部员工类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String id;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 学院的员工类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String id;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 管理学院员工的管理类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line">     <span class="comment">// 返回学院的所有员工</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="comment">// 增加十个学院员工</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">           emp.setId(<span class="string">&quot;学院员工 id = &quot;</span> + i);</span><br><span class="line">           list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 学校管理类</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 分析SchoolManager类的直接朋友类有哪些</span></span><br><span class="line"><span class="comment">   *      Employee/CollegeManager</span></span><br><span class="line"><span class="comment">   * CollegeEmployee不是直接朋友，而是一个陌生类，违背了迪米特法则</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line">     <span class="comment">// 返回学校总部的员工</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 增加五个员工到list</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">           emp.setId(<span class="string">&quot;学校总部员工 id=&quot;</span> + i);</span><br><span class="line">           list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// 该方法完成输出学校总部和学院员工信息</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里的CollegeEmployee 不是 SchoolManager的直接朋友</span></span><br><span class="line"><span class="comment">         * CollegeEmployee是以局部变量方式出现在SchoolManager</span></span><br><span class="line"><span class="comment">         * 违反了迪米特法则</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//获取到学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------学院员工-------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">           System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取到学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------学校总部员工-------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">           System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demeter</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个SchoolManager对象</span></span><br><span class="line">        <span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line">        <span class="comment">// 输出学院的员工ID和学校总部的员工信息</span></span><br><span class="line">        schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">- 应用实例改进</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> 上面的问题在于SchoolManager中，CollageEmployee类并不是SchoolManager类的直接朋友。</span><br><span class="line"></span><br><span class="line">  <span class="number">2.</span> 按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="comment">// 学校总部员工类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String id;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 学院的员工类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String id;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 管理学院员工的管理类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line">     <span class="comment">// 返回学院的所有员工</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="comment">// 增加十个学院员工</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">           emp.setId(<span class="string">&quot;学院员工 id = &quot;</span> + i);</span><br><span class="line">           list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// **输出学院员工的信息</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取到学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;----学院员工----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(CollegeEmployee e : list1) &#123;</span><br><span class="line">           System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 学校管理类</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 分析SchoolManager类的直接朋友类有哪些</span></span><br><span class="line"><span class="comment">   *      Employee/CollegeManager</span></span><br><span class="line"><span class="comment">   * CollegeEmployee不是直接朋友，而是一个陌生类，违背了迪米特法则</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line">     <span class="comment">// 返回学校总部的员工</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 增加五个员工到list</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">           emp.setId(<span class="string">&quot;学校总部员工 id=&quot;</span> + i);</span><br><span class="line">           list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">// 该方法完成输出学校总部和学院员工信息</span></span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将输出学院的员工方法，封装到CollegeManager</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sub.printEmployee();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//获取到学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------学校总部员工-------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">           System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demeter</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---使用迪米特法则的改进---&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个SchoolManager对象</span></span><br><span class="line">        <span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line">        <span class="comment">// 输出学院的员工ID和学校总部的员工信息</span></span><br><span class="line">        schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>迪米特法则的注意事项和细节</p><ol><li>迪米特法则的核心是降低类之间饿耦合</li><li>但注意：由于每个类都减少了不必要的依赖，因此它知识要求降低类间、对象间耦合关系，并不是要求完全没有依赖关系。</li></ol></li></ul><h4 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h4><ul><li><p>原则是尽量使用合成&#x2F;聚合的方式，而不是使用继承</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303140855115.png" alt="image-20230314085507928"></p></li></ul><h4 id="设计原则核心思想"><a href="#设计原则核心思想" class="headerlink" title="设计原则核心思想"></a>设计原则核心思想</h4><ul><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起</li><li>针对接口编程，而不是针对实现编程。</li><li>为了交互对象之间的松耦合设计而努力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>里氏替换·开闭原则</title>
      <link href="/icesoda105.github.io/2023/03/13/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%C2%B7%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/icesoda105.github.io/2023/03/13/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%C2%B7%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><ul><li><p>IOO中的继承性</p><ol><li>继承包含含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求你所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li><li>继承会给程序带来入侵性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他类继承，当这个类需要修改时，必须考虑所有的子类，且父类修改后，子类功能可能产生故障。</li><li>在编程中，如何正确的使用继承&#x3D;&gt;里氏替换原则。</li></ol></li><li><p>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化。那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</p></li><li><p>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类方法。</p></li><li><p>继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决问题。</p></li><li><p>例子：</p><p><strong>重写</strong></p><ul><li><p>概念：在子类中可以根据需要对从父类中继承来的方法进行改造，也称对方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。</p></li><li><p>特点：</p><ol><li>相同的方法名、参数列表</li><li>返回值类型不能大于父类</li><li>访问权限不能小于父类</li><li>不可重写父类中声明为private的方法</li><li>抛出的异常不能大于父类</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">      System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">      <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">      System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A类 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="comment">// 返回两个数的差</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B继承A</span></span><br><span class="line"><span class="comment">// 增加一个新功能：完成两个数相加再和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="comment">// 重写A 可能无意识</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> func1(a,b) + <span class="number">9</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法:</p><ul><li><p>原来运行正常的相减功能报错了，因为B无意重写了它的方法，造成原功能错误。因此，常用重写父类的方法完成新的功能，写起来简单但整个继承体系的复用性差。尤其运行多态频繁时。</p></li><li><p>通用做法：<strong>原来的父类和子类都继承一个更通俗的基类</strong>，原有的继承关系去掉，采用<strong>依赖、聚合、组合</strong>等关系代替。</p></li><li><p>改进方案</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303131537051.png" alt="image-20230313153702784"></p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">      System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">      <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">      System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;1+8=&quot;</span> + b.func1(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用组合仍然可以使用到A类相关方法</span></span><br><span class="line">      System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func3(<span class="number">11</span>,<span class="number">3</span>)); <span class="comment">// 这里本意求出11-3</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个更加基础的基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">   <span class="comment">// 把更加基础的方法和成员写到Base</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">   <span class="comment">// 返回两个数的差</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B继承A</span></span><br><span class="line"><span class="comment">// 增加一个新功能：完成两个数相加再和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="comment">// 如果B需要使用A类的方法，使用组合关系</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> func1(a,b) + <span class="number">9</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 我们仍然想使用A的方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.func1(a,b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><ul><li><p>是变成中最基础、最重要的设计原则</p></li><li><p>一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节。</p></li><li><p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p></li><li><p>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则。</p></li><li><p>例子：</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303131551602.png" alt="image-20230313155123944"></p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 使用看看存在的问题</span></span><br><span class="line">      <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于绘画的类 适用方</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">   <span class="comment">// 接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">         drawRectangle(s);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">         drawCircle(s);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>)</span><br><span class="line">         drawTriangle(s);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 绘制矩形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 绘制圆形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 绘制三角形</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawTriangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shape类，基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="type">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Rectangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Circle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增画三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Triangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：</p><ol><li><p>简单易操作</p></li><li><p>缺点：违反了设计原则的OCP原则，即对扩展开放（提供方），对修改关闭（使用方）。即当我们给类增加新功能的时候，尽量不修改代码，或少修改。</p></li></ol><p>改进思路：</p><ul><li>把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样新增只需要让其继承shape，并实现draw方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">      graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">OtherGraphic</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于绘画的类 使用方</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">   <span class="comment">// 接收Shape对象，调用draw方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">      s.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shape类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="type">int</span> m_type;</span><br><span class="line">   <span class="comment">// 抽象方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Rectangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Circle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增画三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   Triangle() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增一个图形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OtherGraphic</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   OtherGraphic() &#123;</span><br><span class="line">      <span class="built_in">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;绘制其他图形&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单一职责·接口隔离·依赖倒转</title>
      <link href="/icesoda105.github.io/2023/03/09/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%C2%B7%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%C2%B7%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC/"/>
      <url>/icesoda105.github.io/2023/03/09/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%C2%B7%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%C2%B7%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式的重要性"><a href="#设计模式的重要性" class="headerlink" title="设计模式的重要性"></a>设计模式的重要性</h3><ul><li>设计模式是对软件设计中<strong>普遍存在（反复出现）</strong>的各种问题，所提出的解决方案。</li><li>使用设计模式，软件具有很好的扩展性。（客户提出新增功能）</li><li>使用设计模式，项目会有很好的维护性[可读性、规范性]（前同事理智接手维护该项目时）。</li></ul><h3 id="设计模式在软件中的哪里？"><a href="#设计模式在软件中的哪里？" class="headerlink" title="设计模式在软件中的哪里？"></a>设计模式在软件中的哪里？</h3><p>​面向对象（oo）</p><p>​&#x3D;&gt;功能模块[设计模式+算法（数据结构）]</p><p>​&#x3D;&gt;框架[使用到多种设计模式]</p><p>​&#x3D;&gt;架构[服务器集群]</p><h3 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h3><ul><li><p>设计模式的目的：让程序具有更好的 <strong>代码重用性，可读性，可扩展性，可靠性，使程序呈现高内聚、低耦合的特性</strong>。</p></li><li><p>在编程时，应当遵守的原则：</p><ul><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li><li>合成复印原则</li></ul></li></ul><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><ul><li><p>对类来说，<strong>一个类应当只负责意向职责</strong>。</p></li><li><p>交通工具案例分析：</p></li></ul><p>一、方案一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在run方法中，违反了单一职责原则</span></span><br><span class="line"><span class="comment"> * 应根据交通工具运行方法的不同，分解成不同类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在公路上运行...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、方案二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">RoadVehicle</span> <span class="variable">roadvehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoadVehicle</span>();</span><br><span class="line">roadvehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">roadvehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">AirVehicle</span> <span class="variable">airVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirVehicle</span>();</span><br><span class="line">airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遵守单一职责原则</span></span><br><span class="line"><span class="comment"> * 但改动大，将类分解，同时修改客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RoadVehicle</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;公路运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AirVehicle</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;天空运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WaterVehicle</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;水中运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、方案三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">      vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">      vehicle.runWater(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">      vehicle.runAir(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 对原来的类修改小，只是增加方法</span></span><br><span class="line"><span class="comment">    * 未在类级别上遵守单一职责原则</span></span><br><span class="line"><span class="comment">    * 在方法级别上，依旧遵守单一职责原则</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">         System.out.println(vehicle + <span class="string">&quot;在公路上运行...&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runAir</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">         System.out.println(vehicle + <span class="string">&quot;在空中运行...&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runWater</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">         System.out.println(vehicle + <span class="string">&quot;在水上运行...&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单一职责原则注意事项和细节</li></ul><ol><li>降低类的复杂度，一个类只负责意向职责。</li><li>提高类的可读性，可维护性。</li><li>降低变更引起的风险。</li><li>通常，遵守单一职责原则，只有逻辑足够简单，才可在代码级违反，只有类中方法数量足够少，可在方法级别保持单一职责原则。</li></ol><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><ul><li><p>客户端不应该依赖它不需要的接口，<strong>一个类对另一个类的依赖应该建立在最小的接口上</strong>。</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303091135818.png" alt="image-20230309113549557"></p></li><li><p>如果接口interface1对于类A和类C来说不是最小接口，那么类B和类D须实现他们不需要的方法。</p></li><li><p>按隔离原则应当：将接口interface1独立拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</p></li><li><p>应用实例：</p><p>类A通过接口interface1依赖类B，类C通过接口interface1依赖类D，请编写代码完成此应用实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Segregation</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 接口</span></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span>;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span>;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span>;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span>;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation4&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation5&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation4&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation5&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">      <span class="comment">// A类通过接口interface1依赖使用B类，但是只会用到123方法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation1();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation2();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation3();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">      <span class="comment">// C类通过接口interface1依赖使用D类，但是只会用到145方法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation1();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation4();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation5();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应传统方法的问题和使用接口隔离原则改进</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202303091602132.png" alt="image-20230309160232775"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Segregation</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">      <span class="comment">// 将A类通过接口去依赖B</span></span><br><span class="line">      a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">      a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">      a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">      </span><br><span class="line">      <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">      <span class="comment">// 将C类通过接口去依赖D</span></span><br><span class="line">      c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">      c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">      c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 接口1</span></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 接口2</span></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">Interface2</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span>;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 接口3</span></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">Interface3</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span>;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>,Interface2 &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>,Interface3 &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation4&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;B 实现了 operation5&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">      <span class="comment">// A类通过接口interface1依赖使用B类，但是只会用到123方法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation1();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface2 i)</span> &#123;</span><br><span class="line">         i.operation2();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface2 i)</span> &#123;</span><br><span class="line">         i.operation3();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">      <span class="comment">// C类通过接口interface1依赖使用D类，但是只会用到145方法</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">         i.operation1();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface3 i)</span> &#123;</span><br><span class="line">         i.operation4();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface3 i)</span> &#123;</span><br><span class="line">         i.operation5();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者（不用static）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">public class Segregation &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      A a = new A();</span><br><span class="line">      // 将A类通过接口去依赖B</span><br><span class="line">      a.depend1(new B());</span><br><span class="line">      a.depend2(new B());</span><br><span class="line">      a.depend3(new B());</span><br><span class="line"></span><br><span class="line">      C c = new C();</span><br><span class="line">      // 将C类通过接口去依赖D</span><br><span class="line">      c.depend1(new D());</span><br><span class="line">      c.depend4(new D());</span><br><span class="line">      c.depend5(new D());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接口1</span><br><span class="line">interface Interface1 &#123;</span><br><span class="line">   void operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接口2</span><br><span class="line">interface Interface2 &#123;</span><br><span class="line">   void operation2();</span><br><span class="line">   void operation3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接口3</span><br><span class="line">interface Interface3 &#123;</span><br><span class="line">   void operation4();</span><br><span class="line">   void operation5();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B implements Interface1,Interface2 &#123;</span><br><span class="line">   public void operation1() &#123;</span><br><span class="line">      System.out.println(&quot;B 实现了 operation1&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void operation2() &#123;</span><br><span class="line">      System.out.println(&quot;B 实现了 operation2&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void operation3() &#123;</span><br><span class="line">      System.out.println(&quot;B 实现了 operation3&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class D implements Interface1,Interface3 &#123;</span><br><span class="line">   public void operation1() &#123;</span><br><span class="line">      System.out.println(&quot;B 实现了 operation1&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   public void operation4() &#123;</span><br><span class="line">      System.out.println(&quot;B 实现了 operation4&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void operation5() &#123;</span><br><span class="line">      System.out.println(&quot;B 实现了 operation5&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line">   // A类通过接口interface1依赖使用B类，但是只会用到123方法</span><br><span class="line">   public void depend1(Interface1 i) &#123;</span><br><span class="line">      i.operation1();</span><br><span class="line">   &#125;</span><br><span class="line">   public void depend2(Interface2 i) &#123;</span><br><span class="line">      i.operation2();</span><br><span class="line">   &#125;</span><br><span class="line">   public void depend3(Interface2 i) &#123;</span><br><span class="line">      i.operation3();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">   // C类通过接口interface1依赖使用D类，但是只会用到145方法</span><br><span class="line">   public void depend1(Interface1 i) &#123;</span><br><span class="line">      i.operation1();</span><br><span class="line">   &#125;</span><br><span class="line">   public void depend4(Interface3 i) &#123;</span><br><span class="line">      i.operation4();</span><br><span class="line">   &#125;</span><br><span class="line">   public void depend5(Interface3 i) &#123;</span><br><span class="line">      i.operation5();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h4><ul><li><p>基本介绍：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象。</li><li>抽象不应该依赖细节，细节应该依赖抽象。</li><li>依赖倒转的中心思想是<strong>面向接口编程。</strong></li><li>以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。抽象指的是接口或抽象类，细节就是具体的实现类。</li><li>使用接口或抽象类的目的是制定好规范，不涉及具体的操作，把展现细节的任务交给实现类。</li></ol></li><li><p>应用实例：请编程完成Person接收消息的功能。</p><p>一、方案一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependecyInversion</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;电子邮件信息:hello,world&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成Person接收消息的功能</span></span><br><span class="line"><span class="comment"> * 如果我们获取的对象是微信、短信等，则新增类，同时Persons也要增加相应的接收方法</span></span><br><span class="line"><span class="comment"> * 解决：引入一个抽象的接口IReceiver,表示接收者，这样Person类与接口IReceiver发生依赖</span></span><br><span class="line"><span class="comment"> * 因为Email,weixin等属于接收的范围，他们各自实现IReceiver接口就可以</span></span><br><span class="line"><span class="comment"> * 这样即可符合依赖倒转原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Email email)</span> &#123;</span><br><span class="line">      System.out.println(email.getInfo());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、方案二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependecyInversion</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line"></span><br><span class="line">      person.receive(<span class="keyword">new</span> <span class="title class_">WeiXin</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;电子邮件信息:hello,world&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加微信</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeiXin</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;微信信息:hello,ok&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="comment">// 对接口依赖</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(IReceiver receiver)</span> &#123;</span><br><span class="line">      System.out.println(receiver.getInfo());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖关系传递的三种方式和应用案例</p><ol><li><p>接口传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyPass</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ChangHong</span> <span class="variable">changHong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangHong</span>();</span><br><span class="line">      <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>();</span><br><span class="line">      openAndClose.open(changHong);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1：通过接口传递实现依赖</span></span><br><span class="line"><span class="comment">// 开关的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">   <span class="comment">// 抽象方法，接收接口</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">   <span class="comment">// ITV接口</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;长虹电视机，打开&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">      tv.play();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyPass</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.通过构造器进行依赖传递</span></span><br><span class="line">      <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>(changHong);</span><br><span class="line">      openAndClose.open();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2: 通过构造方法依赖传递</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">   <span class="comment">//抽象方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">   <span class="comment">//成员</span></span><br><span class="line">   <span class="keyword">public</span> ITV tv;</span><br><span class="line">   <span class="comment">//构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OpenAndClose</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.tv = tv;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.tv.play();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setter方式传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyPass</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 3.通过setter方法进行依赖传递</span></span><br><span class="line">      <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>();</span><br><span class="line">      openAndClose.setTv(changHong);</span><br><span class="line">      openAndClose.open();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2: 通过setter方法进行依赖传递</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">   <span class="comment">//抽象方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> ITV tv;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.tv = tv;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.tv.play();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;长虹电视机，打开！&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>依赖倒转原则的注意事项和细节</p><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好。</li><li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓存层，利于程序扩展和优化。</li><li>继承时遵循<strong>里氏替换原则</strong>。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/icesoda105.github.io/2023/01/13/Vue/"/>
      <url>/icesoda105.github.io/2023/01/13/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h2><ul><li>M: 模型，即Model，包括数据和一些基本操作</li><li>V:  视图，即View，页面渲染结果</li><li>VM: 即View-Model,模型与视图间的双向操作</li></ul><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><blockquote><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></blockquote><ul><li><p>安装</p><p>通过 npm 安装。这种方式也是官网推荐的方式，需要 nodejs 环境。</p><p>1、新建文件夹 hello-vue，并使用 vscode 打开</p><p>2、使用 vscode 控制台，npm install -y；</p><p>项目会生成 package-lock.json 文件，类似于 maven 项目的 pom.xml 文件。</p><p>3、使用 npm install vue，给项目安装 vue；项目下会多 node_modules 目录，并且在下面有一个 vue 目录。</p></li><li><p><strong>vue</strong> <strong>声明式渲染</strong></p><p>页面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;，非常帅！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>首先通过 new Vue()来创建 Vue 实例</p><p>然后构造函数接收一个对象，对象中有一些属性：</p><p>el：是 element 的缩写，通过 id 选中要渲染的页面元素，本例中是一个 div</p><p>data：数据，数据是一个对象，里面有很多属性，都可以渲染到视图中</p><p>name：这里我们指定了一个 name 属性</p><p>页面中的<code>h2</code>元素中，我们通过的方式，来渲染刚刚定义的 name 属性。</p></li><li><p><strong>双向绑定</strong></p><p>效果：我们修改表单项，num 会发生变化。我们修改 num，表单项也会发生变化。为了实时观察到这个变化，我们将 num 输出到页面。</p><p><strong>我们不需要关注他们为什么会建立起来关联，以及页面如何变化，我们只需要做好数据和</strong></p><p><strong>视图的关联即可（</strong>MVVM）</p></li><li><p><strong>事件处理</strong></p><p>给页面添加一个按钮：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;&#123;name&#125;&#125;，非常帅！！！有&#123;&#123;num&#125;&#125;个人为他点赞。</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建 vue 实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">// el 即 element，该 vue 实例要渲染的页面元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>: &#123; <span class="comment">// 渲染页面需要的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">num</span>: <span class="number">5</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里用<code>v-on</code>指令绑定点击事件，而不是普通的<code>onclick</code>，然后直接操作 num</p><p>普通 click 是无法直接操作 num 的。</p><p>未来我们会见到更多 v-xxx，这些都是 vue 定义的不同功能的指令。</p><p>简单使用总结：</p><p>1）、使用 Vue 实例管理 DOM</p><p>2）、DOM 与数据&#x2F;事件等进行相关绑定</p><p>3）、我们只需要关注数据，事件等处理，无需关心视图如何进行修改</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端技术栈类比-ES6概念及新特性</title>
      <link href="/icesoda105.github.io/2023/01/13/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%E7%B1%BB%E6%AF%94/"/>
      <url>/icesoda105.github.io/2023/01/13/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%E7%B1%BB%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th></th><th>语言</th><th>框架</th><th>工具</th><th>项目构建</th><th>依赖管理</th></tr></thead><tbody><tr><td>前端</td><td>JavaScript（ES6,7,8）</td><td>JQuery、Vue、React</td><td>webstorm、vscode</td><td>webpack、gulp</td><td>npm</td></tr><tr><td>后端</td><td>Java（jdk8,9,10,11）</td><td>Spring、SpringMVC</td><td>idea、eclipse</td><td>maven、gradle</td><td>maven</td></tr></tbody></table><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><blockquote><p><strong>ECMAScript 6.0</strong>（以下简称 ES6，ECMAScript 是一种由 Ecma 国际(前身为欧洲计算机制造商协会,英文名称是 European Computer Manufacturers Association)通过 ECMA-262标准化的脚本程序设计语言）<strong>是</strong> <strong>JavaScript</strong> <strong>语言的下一代标准</strong>，已经在 2015 年 6 月正式发布了，并且从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是 ECMAScript6。</p><p>它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p><strong>每年一个新版本</strong>。</p><p><strong>什么是</strong> <strong>ECMAScript</strong>：</p><p><strong>ECMAScript</strong> <strong>是浏览器脚本语言的规范，而各种我们熟知的</strong> <strong>js</strong> <strong>语言，如</strong> <strong>JavaScript</strong> <strong>则是规范的具体实现</strong>。</p><p>eg: JDBC是标准，Mysql、Oracle等各种驱动是实现</p></blockquote><h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><ul><li><p>let声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 声明的变量往往会越域</span></span><br><span class="line"><span class="comment">// let 声明的变量有严格局部作用域</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment">// var 可以声明多次</span></span><br><span class="line"><span class="comment">// let 只能声明一次</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"><span class="comment">// let n = 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n) <span class="comment">// Identifier &#x27;n&#x27; has already been declared</span></span><br><span class="line"><span class="comment">// var 会变量提升</span></span><br><span class="line"><span class="comment">// let 不存在变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">//ReferenceError: y is not defined</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>const声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明之后不允许改变</span></span><br><span class="line"><span class="comment">// 2. 一但声明必须初始化，否则会报错</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">3</span>; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></li><li><p>解析表达式</p><ol><li><p>数组解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//以前我们想获取其中的值，只能通过角标。ES6 可以这样：</span></span><br><span class="line"><span class="keyword">const</span> [x,y,z] = arr;<span class="comment">// x，y，z 将与 arr 中的每个位置对应来取值</span></span><br><span class="line"><span class="comment">// 然后打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z);</span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"><span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, language &#125; = person;</span><br><span class="line"><span class="comment">// 等价于下面</span></span><br><span class="line"><span class="comment">// const name = person.name;</span></span><br><span class="line"><span class="comment">// const age = person.age;</span></span><br><span class="line"><span class="comment">// const language = person.language;</span></span><br><span class="line"><span class="comment">// 可以分别打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(language);</span><br><span class="line"><span class="comment">//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: nn, age, language &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nn);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(language);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串扩展</p><ol><li><p>几个新的API</p><p>ES6 为字符串扩展了几个新的 API：</p><p>- <code>includes()</code>：返回布尔值，表示是否找到了参数字符串。</p><p>- <code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</p><p>- <code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello.vue&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;hello&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&quot;.vue&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;e&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;hello&quot;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>字符串模板</p><p>模板字符串相当于加强版的字符串，用反引号 &#96;,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、多行字符串</span></span><br><span class="line"><span class="keyword">let</span> ss = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;hello world&lt;span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ss)</span><br><span class="line"><span class="comment">// 2、字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放</span></span><br><span class="line">入 <span class="title class_">JavaScript</span> 表达式。</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>了`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"><span class="comment">// 3、字符串中调用函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;这是一个函数&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sss = <span class="string">`O(∩_∩)O 哈哈~，<span class="subst">$&#123;fun()&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sss); <span class="comment">// O(∩_∩)O 哈哈~，这是一个函数</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>函数优化</p><ol><li><p>函数参数默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="comment">// 判断 b 是否为空，为空就给默认值 1</span></span><br><span class="line">b = b || <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add2</span>(<span class="params">a , b = <span class="number">1</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add2</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></li><li><p>不定参数</p><p>不定参数用来表示不确定参数个数，形如，…变量名，由…加上一个具名参数标识符组成。具名参数<strong>只能放在参数列表的最后</strong>，并且<strong>有且只有一个不定参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...values</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//2</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">//4</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数</p><ol><li><p>一个参数时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前声明一个方法</span></span><br><span class="line"><span class="comment">// var print = function (obj) &#123;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 可以简写为：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">print</span> = obj =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// 测试调用</span></span><br><span class="line"><span class="title function_">print</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>多个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数的情况：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写为：</span></span><br><span class="line"><span class="comment">//当只有一行语句，并且需要返回结果时，可以省略 &#123;&#125; , 结果会自动返回。</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum2</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum2</span>(<span class="number">10</span>, <span class="number">10</span>));<span class="comment">//20</span></span><br><span class="line"><span class="comment">// 代码不止一行，可以用`&#123;&#125;`括起来</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum3</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">c = a + b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum3</span>(<span class="number">10</span>, <span class="number">20</span>));<span class="comment">//30</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>实战：箭头函数结合解构表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求，声明一个对象，hello 方法需要对象的个别属性</span></span><br><span class="line"><span class="comment">//以前的方式：</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"><span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params">person</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello,&quot;</span> + person.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现在的方式</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">hello2</span> = (<span class="params">&#123; name &#125;</span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello,&quot;</span> + name) &#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="title function_">hello2</span>(person);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>对象优化</p><ol><li><p>新增的** <strong>API</strong></p><p>ES6 给 Object 拓展了许多新的方法，如：</p><p>- keys(obj)：获取对象的所有 key 形成的数组</p><p>- values(obj)：获取对象的所有 value 形成的数组</p><p>- entries(obj)：获取对象的所有 key 和 value 形成的二维数组。格式：<code>[[k1,v1],[k2,v2],...]</code> </p><p>- assign(dest, …src) ：将多个 src 对象的值 拷贝到 dest 中。（第一层为深拷贝，第二层为浅拷贝）</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">language</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));<span class="comment">//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(person));<span class="comment">//[&quot;jack&quot;, 21, Array(3)]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(person));<span class="comment">//[Array(2), Array(2), Arra</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">y</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target)<span class="comment">//&#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明对象简写</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;张三&quot;</span><span class="comment">// 传统</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = &#123; <span class="attr">age</span>: age, <span class="attr">name</span>: name &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6：属性名和属性值变量名一样，可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person2 = &#123; age, name &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2) <span class="comment">//&#123;age: 23, name: &quot;张三&quot;&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>对象的函数属性简写</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以前：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eat</span>: <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在吃&quot;</span> + food);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数版：这里拿不到 this</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span> + <span class="string">&quot;在吃&quot;</span> + food),</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写版：</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">eat3</span>(<span class="params">food</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;在吃&quot;</span> + food);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">eat</span>(<span class="string">&quot;apple&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>对象拓展运算符</p><p>拓展运算符（…）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 1、拷贝对象（深拷贝）</span><br><span class="line"></span><br><span class="line">let person1 = &#123; name: &quot;Amy&quot;, age: 15 &#125;</span><br><span class="line"></span><br><span class="line">let someone = &#123; ...person1 &#125;</span><br><span class="line"></span><br><span class="line">console.log(someone) //&#123;name: &quot;Amy&quot;, age: 15&#125;</span><br><span class="line"></span><br><span class="line">// 2、合并对象</span><br><span class="line"></span><br><span class="line">let age = &#123; age: 15 &#125;</span><br><span class="line"></span><br><span class="line">let name = &#123; name: &quot;Amy&quot; &#125;</span><br><span class="line"></span><br><span class="line">let person2 = &#123; ...age, ...name &#125; //如果两个对象的字段名重复，后面对象字</span><br><span class="line"></span><br><span class="line">段值会覆盖前面对象的字段值</span><br><span class="line"></span><br><span class="line">console.log(person2) //&#123;age: 15, name: &quot;Amy&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>map和reduce</p><p><strong>数组</strong>中新增了 map 和 reduce 方法。</p><ol><li><p>map</p><p>map()：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;-5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"></span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">s</span> =&gt;</span> <span class="built_in">parseInt</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>reduce</p><p>语法：</p><p><code>arr.reduce(callback,[initialValue])</code></p><p>reduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce的数组。</p><p>callback （执行数组中每个值的函数，包含四个参数）</p><p>1、previousValue （上一次调用回调返回的值，或者是提供的初始值（</p><p>initialValue））</p><p>2、currentValue （数组中当前被处理的元素）</p><p>3、index （当前元素在数组中的索引）</p><p>4、array （调用 reduce 的数组）</p><p>initialValue （作为第一次调用 callback 的第一个参数。）</p></li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">20</span>,-<span class="number">5</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有初始值：</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b));<span class="comment">//19</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a*b));<span class="comment">//-300//指定初始值：</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b,<span class="number">1</span>));<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a*b,<span class="number">0</span>));<span class="comment">//-0</span></span><br></pre></td></tr></table></figure></li><li><p>Promise</p><blockquote><p>在 JavaScript 的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致 JavaScript 的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现。一旦有一连串的 ajax 请求 a,b,c,d… 后面的请求依赖前面的请求结果，就需要层层嵌套。这种缩进和层层嵌套的方式，非常容易造成上下文代码混乱，我们不得不非常小心翼翼处理内层函数与外层函数的数据，一旦内层函数使用了上层函数的变量，这种混乱程度就会加剧……总之，这种<code>层叠上下文</code>的层层嵌套方式，着实增加了神经的紧张程度。</p></blockquote><p>案例：用户登录，并展示该用户的各科成绩。在页面发送两次请求：</p><p>\1. 查询用户，查询成功说明可以登录</p><p>\2. 查询用户成功，查询科目</p><p>\3. 根据科目的查询结果，获取去成绩</p><p>分析：此时后台应该提供三个接口，一个提供用户查询接口，一个提供科目的接口，一个提供各科成绩的接口，为了渲染方便，最好响应 json 数据。在这里就不编写后台接口了，而是提供三个 json 文件，直接提供 json 数据，模拟后台接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">user.<span class="property">json</span>：</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">1</span>, </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_corse_1.<span class="property">json</span>:</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">10</span>, </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;chinese&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">corse_score_10.<span class="property">json</span>:</span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">100</span>, </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;score&quot;</span>: <span class="number">90</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回调函数嵌套的噩梦：层层嵌套。$.ajax(&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;mock/user.json&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询用户：&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: <span class="string">`mock/user_corse_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到课程：&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: <span class="string">`mock/corse_score_<span class="subst">$&#123;data.id&#125;</span>.json`</span>,</span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到分数：&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们可以通过 Promise 解决以上问题。</p><ol><li><strong>Promise</strong>语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行异步操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(value);<span class="comment">// 调用 resolve，代表 Promise 将返回成功的结果</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reject</span>(error);<span class="comment">// 调用 reject，代表 Promise 会返回失败结果</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);使用箭头函数可以简写为：</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行异步操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(value);<span class="comment">// 调用 resolve，代表 Promise 将返回成功的结果</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reject</span>(error);<span class="comment">// 调用 reject，代表 Promise 会返回失败结果</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，在 promise 中就封装了一段异步执行的结果。</p><ol start="2"><li><p>处理异步结果</p><p>如果我们想要等待异步执行完成，做一些事情，我们可以通过 promise 的 then 方法来实现。</p><p>如果想要处理 promise 异步执行失败的事件，还可以跟上 catch：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步执行成功后的回调</span></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步执行失败后的回调</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Promise</strong> <strong>改造以前嵌套方式</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;mock/user.json&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询用户：&quot;</span>, data);</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(data.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">userId</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: <span class="string">`mock/user_corse_<span class="subst">$&#123;userId&#125;</span>.json`</span>,<span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到课程：&quot;</span>, data);</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(data.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">corseId</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(corseId);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: <span class="string">`mock/corse_score_<span class="subst">$&#123;corseId&#125;</span>.json`</span>,</span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>(<span class="params">data</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到分数：&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>优化处理</p><p>优化：通常在企业开发中，会把 promise 封装成通用方法，如下：封装了一个通用的 get 请求方法；</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> get = <span class="keyword">function</span> (<span class="params">url, data</span>) &#123; <span class="comment">// 实际开发中会单独放到 common.js 中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>: url,</span><br><span class="line"></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">data</span>: data,</span><br><span class="line"></span><br><span class="line"><span class="title function_">success</span>(<span class="params">result</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(result);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reject</span>(error);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// 使用封装的 get 方法，实现查询分数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&quot;mock/user.json&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询用户：&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">get</span>(<span class="string">`mock/user_corse_<span class="subst">$&#123;result.id&#125;</span>.json`</span>);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到课程：&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">get</span>(<span class="string">`mock/corse_score_<span class="subst">$&#123;result.id&#125;</span>.json`</span>)</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询到分数：&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出现异常了：&quot;</span> + error);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过比较，我们知道了 Promise 的扁平化设计理念，也领略了这种<code>上层设计</code>带来的好处。</p><p>我们的项目中会使用到这种异步处理的方式；</p></li><li><p>模块化</p><ol><li><p>什么是模块化</p><p>模块化就是把代码进行拆分，方便重复利用。类似 java 中的导包：要使用一个包，必须先导包。而 JS 中没有包的概念，换来的是 <strong>模块</strong>。</p><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p><p> <code>export</code>命令用于规定模块的对外接口。</p><p> <code>import</code>命令用于导入其他模块提供的功能。</p></li><li><p><strong>export</strong></p><p>比如我定义一个 js 文件:hello.js，里面有一个对象</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>          我可以使用 export 将这个对象导出：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = &#123;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a + b;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> &#123;util&#125;;</span><br><span class="line">  </span><br><span class="line">当然，也可以简写为：</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> util = &#123;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<code>export</code>不仅可以导出对象，一切 JS 变量都可以导出。比如：基本类型变量、函数、数组、对象。</p><p>当要导出多个值时，还可以简写。比如我有一个文件：user.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;jack&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> age = <span class="number">21</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> &#123;name,age&#125;</span><br></pre></td></tr></table></figure><p>省略名称</p><p>上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出</p><p>变量名，否则就会出错。</p><p>因此 js 提供了<code>default</code>关键字，可以对导出的变量名进行省略</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无需声明对象的名字</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">sum</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当使用者导入时，可以任意起名字</p><ol start="3"><li><p><strong>import</strong></p><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p><p>例如我要使用上面导出的 util：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 utilimport util from &#x27;hello.js&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 调用 util 中的属性</span></span><br><span class="line">  </span><br><span class="line">util.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>要批量导入前面导出的 name 和 age：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">&#x27;user.js&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot; , 今年&quot;</span>+ age +<span class="string">&quot;岁了&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是上面的代码暂时无法测试，因为浏览器目前还不支持 ES6 的导入和导出功能。除非借</p><p>助于工具，把 ES6 的语法进行编译降级到 ES5，比如<code>Babel-cli</code>工具</p></li></ul><p>ps: 新建html<code>! + tab</code> 生成html文档</p>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaScript，Vue </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客可视化管理工具</title>
      <link href="/icesoda105.github.io/2023/01/13/hexo%E5%8D%9A%E5%AE%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/icesoda105.github.io/2023/01/13/hexo%E5%8D%9A%E5%AE%A2%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li><p>安裝</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131119646.png" alt="image-20230113111947869"></p></li><li><p>运行</p><p><code>hexo server -d</code></p><p>本地：<a href="http://localhost:4000/admin">http://localhost:4000/admin</a></p><p>线上：<a href="http://localhost:4000/icesoda105.github.io/admin">http://localhost:4000/icesoda105.github.io/admin</a></p></li><li><p>设置用户名密码</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131131535.png" alt="image-20230113113135472"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gateway创建&amp;测试API网关</title>
      <link href="/icesoda105.github.io/2023/01/13/Gateway%E5%88%9B%E5%BB%BA-%E6%B5%8B%E8%AF%95API%E7%BD%91%E5%85%B3/"/>
      <url>/icesoda105.github.io/2023/01/13/Gateway%E5%88%9B%E5%BB%BA-%E6%B5%8B%E8%AF%95API%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<ul><li><p>创建网关 依赖common   并修改各依赖版本</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131026248.png" alt="image-20230113102617630"></p></li><li><p>开启服务的注册发现</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131029757.png" alt="image-20230113102930535"></p></li><li><p>配置nacos的注册中心地址</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131030284.png" alt="image-20230113103025197"></p></li><li><p>命名空间</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131032785.png" alt="image-20230113103228750"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131034415.png" alt="image-20230113103450503"></p></li><li><p>排除和数据源有关的配置</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131037766.png" alt="image-20230113103734234"></p><p><code>@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</code></p><p>网关还没有用到数据库，但是common里有这个依赖，所以要排除</p></li><li><p>配置网关所使用的的端口</p><p><code>server.port=88</code></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131039710.png" alt="image-20230113103930547"></p></li><li><p>配置网关路由规则</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131043086.png" alt="image-20230113104313900"></p><p><code>http://localhost:88/hello?url=weibo</code></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301131051563.png" alt="image-20230113105133649"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gateway </tag>
            
            <tag> SpingCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gateway网关核心概念&amp;原理</title>
      <link href="/icesoda105.github.io/2023/01/13/Gateway%E7%BD%91%E5%85%B3%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%8E%9F%E7%90%86/"/>
      <url>/icesoda105.github.io/2023/01/13/Gateway%E7%BD%91%E5%85%B3%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130959271.png" alt="image-20230113095945682"></p>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gateway </tag>
            
            <tag> SpingCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos配置中心</title>
      <link href="/icesoda105.github.io/2023/01/12/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/icesoda105.github.io/2023/01/12/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><blockquote><p>   如何使用nacos作为配置中心 统一管理配置</p><ol><li><p>引入依赖<br><code>&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt;</code></p></li><li><p>创建一个 bootstrap.properties<br><code>spring.application.name=icesodamall-coupon spring.cloud.nacos.config.server-addr=127.0.0.1:8848</code></p></li><li><p>需要给配置中心默认添加一个叫 数据集(Data Id)</p><p>   默认规则当前应用名</p><p>   <code>.properties(icesodamall-coupon.properties)</code></p></li><li><p>给应用名.properties添加任何配置</p></li><li><p>动态获取配置</p></li></ol><p>@RefreshScope: 动态获取并刷新配置<br>@Value(“${配置项的名}”)： 获取到配置。<br>如果配置中心和当前应用的配置文件照片那个都配置了相同的项 优先使用配置中心的配置</p></blockquote><ul><li><p>在公共项目中导入注册发现的依赖</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121459478.png" alt="image-20230112145924335"></p></li><li><p>创建文件，bootstrap.properties 会优先于 application.properties</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121508354.png" alt="image-20230112150110809"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121509098.png" alt="image-20230112150536716"></p></li><li><p>测试</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121508921.png" alt="image-20230112150707186"></p></li></ul><ol><li>添加配置文件信息<br> <img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121542548.png" alt="image-20230112150811664"></li></ol><p>  <img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121542563.png" alt="image-20230112154234380"></p><ol start="2"><li>结果：</li></ol><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121548636.png" alt="image-20230112151502640"></p><ol start="3"><li><p>若需修改，just:<br><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121548019.png" alt="image-20230112154646252"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121548247.png" alt="image-20230112154842650"></p></li></ol><ul><li><p>改进：在配置中心该数据，all动态修改</p><ol><li><p>在配置中心中新建对应服务的配置</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121558611.png" alt="image-20230112155816631"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121558596.png" alt="image-20230112155854948"></p></li><li><p>在controller中添加注解   @RefreshScope   刷新配置</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121600906.png" alt="image-20230112160010953"></p></li><li><p>修改配置，无需重启动态更新</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121601616.png" alt="image-20230112160142815"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121642317.png" alt="image-20230112164239641"></p></li></ol></li></ul><h2 id="命名空间与配置分组"><a href="#命名空间与配置分组" class="headerlink" title="命名空间与配置分组"></a>命名空间与配置分组</h2><blockquote><p>​命名空间： 配置隔离<br>默认：public(保留空间)：默认新增的所有配置都在public空间</p><p>开发 测试 生产 : 利用命名空间来做环境隔离<br>注意：在bootstrap.properties: 配置上 需要使用哪个命名空间下的配置<br><code>spring.cloud.nacos.config.namespace=</code></p><p>​每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</p><p>配置集： 所有的配置的集合</p><p>配置集ID 类似配置文件名<br>Data ID 类似配置文件名</p><p>配置分组<br>默认所有的配置集都属于：DEFAULT_GROUP：<br>1111, 618, 1212</p><p>​    每个微服务创建自己的命名空间。使用配置分组，区分环境，dev,test,prod</p></blockquote><ul><li><p>新建命名空间并添加对应配置</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121718183.png" alt="image-20230112171835186"></p></li><li><p>在bootstrap中添加配置信息 指定生效的命名空间</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121729165.png" alt="image-20230112172858120"></p></li><li><p>给每个微服务创建命名空间</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121737992.png" alt="image-20230112173702480"></p><p>后续可以根据需求给各个微服务配置对应的命名空间</p></li><li><p>配置分组</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121748931.png" alt="image-20230112174857458"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121749172.png" alt="image-20230112174915712"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121752031.png" alt="image-20230112175231900"></p></li></ul><h2 id="加载多配置集"><a href="#加载多配置集" class="headerlink" title="加载多配置集"></a>加载多配置集</h2><blockquote><p>同时加载多个配置集<br>1 微服务任何配置信息 任何配置文件都可以放在配置中心中<br>2 只需要在bootstrap.properties说明加载配置中心中配置哪些配置文件即可<br>3 <code>@Value @ConfigurationProperties ...</code><br>以前SpringBoot任何方式从配置文件中获取值 都能使用<br>配置中心有的优先使用配置中心中的</p></blockquote><ul><li><p>配置中心添加application.yml中的配置信息</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130934424.png" alt="image-20230113093444459"></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130936159.png" alt="image-20230113093612065"></p></li><li><p>让微服务启动时同时加载多个配置 以合成一个完成的配置</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130941546.png" alt="image-20230113094101656"></p><p>动态刷新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.nacos.config.extension-configs[<span class="number">0</span>].refresh=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>指定了命名空间、组名时，找到不对应的配置文件，就会读取本地配置里的配置文件。</strong></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130943851.png" alt="image-20230113094334453"></p><p><code>spring.cloud.nacos.config.group=1005</code></p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130949267.png" alt="image-20230113094907253"></p></li><li><p>测试：</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301130952854.png" alt="image-20230113095245857"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章新建模板测试</title>
      <link href="/icesoda105.github.io/2023/01/12/%E6%96%87%E7%AB%A0%E6%96%B0%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95/"/>
      <url>/icesoda105.github.io/2023/01/12/%E6%96%87%E7%AB%A0%E6%96%B0%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> java </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpingCloud-OpenFeign远程调用</title>
      <link href="/icesoda105.github.io/2023/01/12/SpingCloud-OpenFeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
      <url>/icesoda105.github.io/2023/01/12/SpingCloud-OpenFeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><blockquote><p>​Feign是一个声明式的HTTP客户端，它的目的就是让远程调用更加简单。Feign提供了HTTP请求的模板，<strong>通过编写简单的接口和插入注解</strong>，就可以定义好HTTP请求的参数、格式、地址等信息。</p><p>​Feign整合了**Ribbon(负载均衡)<strong>和</strong>Hystrix(服务熔断)**可以让我们不再需要显式地使用这两个组件。</p><p>​SpringCloudFeign在NetflixFeign的基础上扩展了对SpringMVC注解的支持，在其实现下，只需创建一个接口并用注解的方式来配置它，即可完成对服务提供方的接口绑定。简化了SpringCloudRibbon自行封装服务调用客户端的开发量。</p></blockquote><ul><li><p>引入依赖</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301120943546.png" alt="image-20230112094229204"></p></li><li><p>eg：member调用coupon服务</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301120949104.png" alt="image-20230112094857787"></p><p>ps：R代表 <strong>ResultEntity</strong></p></li></ul><h3 id="想要远程调用别的服务"><a href="#想要远程调用别的服务" class="headerlink" title="想要远程调用别的服务"></a>想要远程调用别的服务</h3><ul><li><p>引入open-feign</p></li><li><p>编写一个接口，告诉SpringCloud这个接口需要调用远程服务</p><ol><li>声明接口的每一个方法都是调用哪个远程服务的哪个请求</li></ol><p>  <img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301120957662.png" alt="image-20230112095707363">  </p></li><li><p>开启远程调用功能 </p><p><strong>@EnableFeignClients</strong></p><p><img src="/icesoda105.github.io/upload/image-20230112101033464.png" alt="image-20230112101033464"></p></li><li><p>测试（会员服务中远程调用优惠券）</p><p>在会员服务的controller中调入优惠券远程接口</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121021256.png" alt="image-20230112102151768"></p><p>远程获取结果：（被调用服务必须上线）</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301121038255.png" alt="image-20230112103808393"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seanBlog的远程仓库推送</title>
      <link href="/icesoda105.github.io/2022/12/19/seanBlog%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81/"/>
      <url>/icesoda105.github.io/2022/12/19/seanBlog%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="github"><a href="#github" class="headerlink" title="github"></a>github</h4><ul><li><p>create a new repository on the command line</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# seanblog&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:icesoda105/seanblog.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><h3 id="push-an-existing-repository-from-the-command-line"><a href="#push-an-existing-repository-from-the-command-line" class="headerlink" title="push an existing repository from the command line"></a>push an existing repository from the command line</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:icesoda105/seanblog.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新建文章</title>
      <link href="/icesoda105.github.io/2022/12/13/%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/icesoda105.github.io/2022/12/13/%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>图床测试</p><p><img src="https://icesoda-picgo.oss-cn-beijing.aliyuncs.com/imgtest/202301111703831.png" alt="image-20230111170338191"></p><p><img src="D:/Program%20Files/Typora/upload/image-20230111170411486.png" alt="image-20230111170411486"></p>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos注册中心</title>
      <link href="/icesoda105.github.io/2022/12/12/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/icesoda105.github.io/2022/12/12/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<ul><li>将Nacos作为注册中心</li></ul><ol><li><p>给common中添加服务注册功能，Nacos依赖</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212165628780.png" alt="image-20221212165628780"></p></li><li><p>在应用的&#x2F;src&#x2F;main&#x2F;res&#x2F;application.properties配置文件中配置Nacos Server地址</p><ul><li><p>首先安装启动Nacos</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212172718855.png" alt="image-20221212172718855"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212172750277.png" alt="image-20221212172750277"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212174531134.png" alt="image-20221212174531134"></p></li><li><p>使用@EnableDiscoveryClient注解开启服务注册与发现功能</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213092900229.png" alt="image-20221213092900229"></p></li><li><p>登录nacos（账号密码默认：nacos）</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213093059994.png" alt="image-20221213093059994"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213093151363.png" alt="image-20221213093151363"></p></li><li><p>此时是没有应用注册到</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213093327634.png" alt="image-20221213093327634"></p></li><li><p>在yml中添加服务名</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213093847698.png" alt="image-20221213093847698"></p></li><li><p>重启</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213094029037.png" alt="image-20221213094029037"></p></li></ul></li></ol><ul><li><p>将Nacos作为配置中心</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221213100350157.png" alt="image-20221213100350157"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式组件-SpringCloud-Alibaba</title>
      <link href="/icesoda105.github.io/2022/12/12/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6-SpringCloud-Alibaba/"/>
      <url>/icesoda105.github.io/2022/12/12/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6-SpringCloud-Alibaba/</url>
      
        <content type="html"><![CDATA[<h3 id="微服务-注册中心-配置中心-网关"><a href="#微服务-注册中心-配置中心-网关" class="headerlink" title="微服务-注册中心-配置中心-网关"></a>微服务-注册中心-配置中心-网关</h3><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212145658041.png" alt="image-20221212145658041"></p><ul><li><p>注册中心：Service Discovery :</p><p>​Spring Cloud Netflix : Eureka</p></li><li><p>配置中心：Spring Cloud Config :</p><p>​Spring Cloud Netflix : Zuul</p></li><li><p>本项目使用的是SpringCloud Alibaba提供的分布式组件</p><ul><li>微服务开发的一站式解决方案，包含开发分布式应用微服务的必需组件</li><li>只需要添加一些注解和少量配置，就可以将SpringCloud Alibaba应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</li></ul></li><li><p>SpringCloud:</p><ul><li>部分组件停止维护和更新，给开发带来不便。</li><li>部分环境搭建复杂，没有完善的可视化界面，需要大量的二次开发和定制。</li><li>配置复杂，难以上手，部分配置差别难以区分和合理应用。</li></ul></li><li><p>SpringCloud Alibaba的优势：</p><p>阿里使用过的组件经历了考验，性能强悍，设计合理，现在开源出来大家用成套的产品搭配完善的可视化界面给开发运维带来极大的便利。搭建简单，学习曲线低。</p></li><li><p>结合SpringCloud Alibaba 最终的技术搭配方案：</p><ul><li>SpringCloud Alibaba - Nacos: 注册中心（服务发现、注册）</li><li>SpringCloud Alibaba - Nacos: 配置中心（动态配置管理）</li><li>SpringCloud - Ribbon: 负载均衡</li><li>SpringCloud - Feign: 声明式HTTP客户端（调用远程服务）</li><li>SpringCloud Alibaba - Sentinel: 服务容错（限流、降级、熔断）</li><li>SpringCloud - Gateway: API网关（webflux编程模式）</li><li>SpringCloud - Sleuth: 调用链监控</li><li>SpringCloud Alibaba - Seata: 原 Fescar，即分布式事务解决方案</li></ul></li><li><p>组件</p><ul><li>Sentinel: 把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维护保护服务的稳定性。</li><li>Nacos: 一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>RocketMQ:一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订购服务。</li><li>Dubbo: Apache Dubbo(TM)是一款高性能Java RPC框架。</li><li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM: 一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li>Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service,简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置&amp;测试微服务基本CRUD功能</title>
      <link href="/icesoda105.github.io/2022/12/12/%E9%85%8D%E7%BD%AE-%E6%B5%8B%E8%AF%95%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E6%9C%ACCRUD%E5%8A%9F%E8%83%BD/"/>
      <url>/icesoda105.github.io/2022/12/12/%E9%85%8D%E7%BD%AE-%E6%B5%8B%E8%AF%95%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E6%9C%ACCRUD%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="整合Mybatis-Plus"><a href="#整合Mybatis-Plus" class="headerlink" title="整合Mybatis-Plus"></a>整合Mybatis-Plus</h3><ul><li><p>导入依赖</p></li><li><p>配置</p><ol><li><p>配置数据库</p><ul><li>导入数据库驱动(对应数据库版本)</li></ul></li><li><p>配置MyBatis-Plus</p><ul><li>使用MapperScan</li><li>告诉Mybatis-Plus，sql映射文件位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212095723955.png" alt="image-20221212095723955"></p></li></ol></li><li><p>测试向数据库添加数据</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212105303171.png" alt="image-20221212105303171"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212105328165.png" alt="image-20221212105328165"></p></li><li><p>修改数据</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212110047746.png" alt="image-20221212110047746"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212110118622.png" alt="image-20221212110118622"></p></li><li><p>查询数据</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221212110718033.png" alt="image-20221212110718033"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程搭建&amp;使用</title>
      <link href="/icesoda105.github.io/2022/12/09/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA-%E4%BD%BF%E7%94%A8/"/>
      <url>/icesoda105.github.io/2022/12/09/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><p>代码生成器</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209151432515.png" alt="image-20221209151432515"></p></li><li><p>在module中添加</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209151533239.png" alt="image-20221209151533239"></p></li><li><p>修改配置内容</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209152223447.png" alt="image-20221209152223447"></p></li><li><p>运行代码生成器</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209154450242.png" alt="image-20221209154450242"></p></li><li><p>逐个模块生成本地代码</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209160519951.png" alt="image-20221209160519951"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209161742381.png" alt="image-20221209161742381"></p></li><li><p>将生成好的main文件逐个替换到微服务板块中（删除自动生产的前端代码）</p></li><li><p>创建微服务公共工具类&#x2F;bean依赖，集中管理</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209162620317.png" alt="image-20221209162620317"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>后台管理系统-人人开源</title>
      <link href="/icesoda105.github.io/2022/12/09/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E4%BA%BA%E4%BA%BA%E5%BC%80%E6%BA%90/"/>
      <url>/icesoda105.github.io/2022/12/09/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E4%BA%BA%E4%BA%BA%E5%BC%80%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<ul><li>人人开源：renren-fast，renren-fast-vue（前后端分离）</li><li>git clone 克隆到本地后删除掉文件中的.git</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209110312215.png" alt="image-20221209110312215"></p><ul><li><p>在module中添加 renren-fast</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209110523625.png" alt="image-20221209110523625"></p></li><li><p>为后台管理系统创建数据库</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209110723267.png" alt="image-20221209110723267"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209111357846.png" alt="image-20221209111357846"></p></li><li><p>猫一眼配置信息</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209111644215.png" alt="image-20221209111644215"></p></li><li><p>修改连接信息</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209112016878.png" alt="image-20221209112016878"></p></li><li><p>测试运行</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209112139481.png" alt="image-20221209112139481"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221209112727420.png" alt="image-20221209112727420"></p><ul><li>前端：vscode</li><li>安装node.js : Node.js是一个基于Chrome V8 引擎的JavaScript运行环境。</li><li>NPM随同NODEJS一起安装的包管理工具（使用淘宝镜像）<ul><li>npm install(管理员身份)</li><li>npm run dev</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库初始化</title>
      <link href="/icesoda105.github.io/2022/12/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/icesoda105.github.io/2022/12/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li><p>开发工具：PowerDesigner</p><p>![image-20221209092956800](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209092956800.png)</p></li></ul><p>![image-20221209093217025](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209093217025.png)</p><ul><li><p>生成数据库</p><p>![image-20221209093554327](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209093554327.png)</p></li></ul><p>![image-20221209093628635](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209093628635.png) </p><ul><li><p>登录数据库测试连接</p><p>![image-20221209094354309](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209094354309.png)</p></li></ul><p>![image-20221209094455462](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209094455462.png)</p><ul><li><p>设置虚拟机docker、mysql开机自启</p><p>![image-20221209094720539](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209094720539.png)</p></li></ul><p>![image-20221209094835224](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209094835224.png)</p><ul><li><p>重启</p><p>![image-20221209095230667](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209095230667.png)</p></li><li><p>PHPstudy启动本地mysql</p></li></ul><p>![image-20221209095821503](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209095821503.png)</p><ul><li>测试连接，password：root</li><li>创建数据库</li></ul><p>![image-20221209100400629](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209100400629.png)</p><ul><li><p>运行sql脚本建表语句</p><p>![image-20221209101830451](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;image-20221209101830451.png)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>环境安装配置</title>
      <link href="/icesoda105.github.io/2022/11/15/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/icesoda105.github.io/2022/11/15/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>jdk版本要求1.8+</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115131705443.png" alt="image-20221115131705443"></p></li><li><p>Maven版本</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115131820927.png" alt="image-20221115131820927"></p></li><li><p>替换镜像</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115132153587.png" alt="image-20221115132153587"></p><p>替换为阿里云镜像</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115132332622.png" alt="image-20221115132332622"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115132751068.png" alt="image-20221115132751068"></p></li><li><p>idea整合maven</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115133012521.png" alt="image-20221115133012521"></p></li><li><p>idea安装插件</p><ul><li><p>lombok 简化开发</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115133950708.png" alt="image-20221115133950708"></p></li><li><p>mybatisx mybatisPlus提供的快速定位到xml</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115134115690.png" alt="image-20221115134115690"></p></li></ul></li><li><p>前端开发 vscode 插件安装</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221115134649040.png" alt="image-20221115134649040"></p></li><li><p>配置git</p></li><li><p>创建每一个微服务模块</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装docker</title>
      <link href="/icesoda105.github.io/2022/11/11/%E5%AE%89%E8%A3%85docker/"/>
      <url>/icesoda105.github.io/2022/11/11/%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="：虚拟化容器技术，docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。"><a href="#：虚拟化容器技术，docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。" class="headerlink" title="：虚拟化容器技术，docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。"></a>：虚拟化容器技术，docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行环境，容器之间互相隔离。</h4><ul><li><p>卸载之前的docker</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111160409130.png" alt="image-20221111160409130"></p></li><li><p>安装依赖</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111160643690.png" alt="image-20221111160643690"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111160703937.png" alt="image-20221111160703937"></p></li><li><p>安装地址</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111160828423.png" alt="image-20221111160828423"></p></li><li><p>安装docker以及 docker-cli docker的引擎、操作docker的客户端和它的容器</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111161337161.png" alt="image-20221111161337161"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111161356534.png" alt="image-20221111161356534"></p></li><li><p>启动docker及设置开机自启</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111161630998.png" alt="image-20221111161630998"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111161739522.png" alt="image-20221111161739522"></p></li><li><p>配置docker国内的镜像加速（阿里云）方便后续安装mysql、redis</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111162218713.png" alt="image-20221111162218713"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111162309209.png" alt="image-20221111162309209"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111162442526.png" alt="image-20221111162442526"></p></li><li><p>docker安装mysql</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111162756000.png" alt="image-20221111162756000"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111163717724.png" alt="image-20221111163717724"></p></li><li><p>创建实例并启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line"></span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line"></span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line"></span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line"></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line"></span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>参数说明</p><blockquote><p>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql：将配置文件夹挂载到主机</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql：将日志文件夹挂载到主机</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;：将配置文件夹挂载到主机</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;root：初始化 root </p></blockquote></li><li><p>切换root用户</p><p>账号密码： vagrant</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111164331983.png" alt="image-20221111164331983"></p></li><li><p>主机测试虚拟机安装的mysql</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111164644679.png" alt="image-20221111164644679"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111164737720.png" alt="image-20221111164737720"></p><ul><li>mysql 一个完整且独立的运行环境 处于一个微型的Linux环境中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111165409920.png" alt="image-20221111165409920"></p><ul><li>mysql配置文件的修改</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111174724965.png" alt="image-20221111174724965"></p></li><li><p>docker安装redis</p><ul><li><p>下载镜像</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114125704629.png" alt="image-20221114125704629"></p></li><li><p>创建实例并启动</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114130214450.png" alt="image-20221114130214450"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114130452568.png" alt="image-20221114130452568"></p></li><li><p>默认持久化</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114130935287.png" alt="image-20221114130935287"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114131001613.png" alt="image-20221114131001613"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114131349501.png" alt="image-20221114131349501"></p></li><li><p>redis可视化客户端</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114131442405.png" alt="image-20221114131442405"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114131650131.png" alt="image-20221114131650131"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114131721883.png" alt="image-20221114131721883"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114132103861.png" alt="image-20221114132103861"></p></li><li><p>redis官方文档</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114132423894.png" alt="image-20221114132423894"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221114132540825.png" alt="image-20221114132540825"></p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows-虚拟机网络桥接</title>
      <link href="/icesoda105.github.io/2022/11/11/Windows-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A1%A5%E6%8E%A5/"/>
      <url>/icesoda105.github.io/2022/11/11/Windows-%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A1%A5%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="网络地址转换-端口转发"><a href="#网络地址转换-端口转发" class="headerlink" title="网络地址转换-端口转发"></a>网络地址转换-端口转发</h3><ul><li><p>避免主机和Linux下端口映射工作的冗余,给虚拟机一个固定的ip地址，方便Windows和Linux  ping</p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111151315046.png" alt="image-20221111151315046"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111151622995.png" alt="image-20221111151622995"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111153033521.png" alt="image-20221111153033521"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111152152824.png" alt="image-20221111152152824"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111153348804.png" alt="image-20221111153348804"></p><ul><li>互ping</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111154043372.png" alt="image-20221111154043372"></p><p>  <img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111154019687.png" alt="image-20221111154019687"></p><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111154240896.png" alt="image-20221111154240896"></p>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>icesodaMall基础环境搭建及启动</title>
      <link href="/icesoda105.github.io/2022/11/10/icesodaMall%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%90%AF%E5%8A%A8/"/>
      <url>/icesoda105.github.io/2022/11/10/icesodaMall%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>​virtualBox、vagrant（D:\HashiCorp\Vagrant）</p><ul><li><p>vagrant版本 命令<br><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111143948448.png" alt="image-20221111143948448"></p></li><li><p>vagrant初始化一个虚拟机</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111144235470.png" alt="image-20221111144235470"></p><ul><li>whoami</li></ul><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111144818744.png" alt="image-20221111144818744"></p><ol><li>启动Linux虚拟机——virtualBox</li><li>启动vagrant连接virtualBox（E:\vagrantMall）<ul><li>vagrant ssh（Windows环境下）</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20221111144638849.png" alt="image-20221111144638849"></p>]]></content>
      
      
      <categories>
          
          <category> icesodaMall </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo新建博客</title>
      <link href="/icesoda105.github.io/2022/11/04/hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/icesoda105.github.io/2022/11/04/hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>​新建文章 hexo new “文章名”</p><p>![009a0052121237ea261d5364c853cbf](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;009a0052121237ea261d5364c853cbf.jpg)</p>]]></content>
      
      
      <categories>
          
          <category> Hexo基本使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo启动</title>
      <link href="/icesoda105.github.io/2022/11/04/hexo%E5%90%AF%E5%8A%A8/"/>
      <url>/icesoda105.github.io/2022/11/04/hexo%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>启动：hexo g , hexo s </p><p>本地地址: <a href="http://localhost:4000/icesoda105/">http://localhost:4000/icesoda105/</a></p><p>![0ac902d998d93a7eb3cc73da75ca03a](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;0ac902d998d93a7eb3cc73da75ca03a.jpg)</p><p>![c41f354d1256e5028cbf2d095ca21c3](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;c41f354d1256e5028cbf2d095ca21c3.jpg)</p>]]></content>
      
      
      <categories>
          
          <category> Hexo基本使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python学习</title>
      <link href="/icesoda105.github.io/2022/11/03/Python%E5%AD%A6%E4%B9%A0/"/>
      <url>/icesoda105.github.io/2022/11/03/Python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/icesoda105.github.io/2022/08/28/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/icesoda105.github.io/2022/08/28/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/740942_1470042423855_86F5A9F9F791DD7EA7C96F158F0FEA87.jpg" alt="740942_1470042423855_86F5A9F9F791DD7EA7C96F158F0FEA87"></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li><p>双向队列的定义</p><p><code>Deque&lt;Character&gt; deque = new LinkedList&lt;&gt;();</code></p><p><code>ArrayDeque&lt;Character&gt; deque = new ArrayDeque&lt;&gt;();</code></p></li><li><p>单调队列的定义</p><p><code>ArrayDeque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;();</code></p></li><li><p>栈的定义</p><p><code>Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();</code></p></li><li><p>哈希表的定义</p><p><code>HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</code></p></li><li><p>entrySet的定义</p><p><code>Set&lt;Map.Entry&lt;Integer,Integer&gt;&gt; entrise = map.entrySet();</code></p></li><li><p>优先级队列定义大顶堆</p><p><code>PriorityQueue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; queue= new PriorityQueue&lt;&gt;((o1,o2) -&gt; (o2.getValue() - o1.getValue()));</code></p></li></ul><h4 id="方法及属性"><a href="#方法及属性" class="headerlink" title="方法及属性"></a>方法及属性</h4><ol><li><p><strong>ArrayList</strong><code>import java.util.ArrayList;</code></p><p>​<code>ArrayList&lt;E&gt; objectName = new ArrayList&lt;&gt;();</code>  </p><ul><li>get();访问元素</li><li>set();     修改元素</li><li>remove();    删除元素</li></ul><p><strong>适用</strong>：</p><pre><code>        1. 频繁访问列表中的某一个元素。           2. 只需要在列表末尾进行添加和删除元素操作。</code></pre></li><li><p>LinkedList     <code>import java.util.LinkedList;</code></p><p><strong>适用</strong>：</p><ol><li>需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ol></li></ol><h4 id="将字符串转为字符数组"><a href="#将字符串转为字符数组" class="headerlink" title="将字符串转为字符数组"></a>将字符串转为字符数组</h4><ul><li><code>char[] ch = s.toCharArray();</code></li></ul><h4 id="返回一个新的字符串"><a href="#返回一个新的字符串" class="headerlink" title="返回一个新的字符串"></a>返回一个新的字符串</h4><ul><li><code>return new String(ch,0,end);</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的迭代遍历</title>
      <link href="/icesoda105.github.io/2022/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86/"/>
      <url>/icesoda105.github.io/2022/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<ul><li><p>递归的实现就是：<strong>每一次递归调用都会把函数的局部变量、参数值、返回地址压入到调用栈中</strong>，然后递归返回的时候，从栈顶弹出上一次递归的各项参数（所以用栈也可以实现深度优先遍历）</p></li><li><p>前序遍历(<strong>中左右 入栈顺序 中右左</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span><br><span class="line">// 定义结果数组</span><br><span class="line">List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">// 越界问题</span><br><span class="line">if (root == null) &#123;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">// 定义栈并初始化</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">stack.push(root);</span><br><span class="line"></span><br><span class="line">while (!stack.isEmpty()) &#123;</span><br><span class="line">// 定义新节点指向栈顶</span><br><span class="line">TreeNode node = stack.pop();</span><br><span class="line"></span><br><span class="line">result.add(node.val); // 中</span><br><span class="line">if (node.right !== null) &#123; // 右</span><br><span class="line">stack.push(node.right);</span><br><span class="line">&#125;</span><br><span class="line">if (node.left !== null) &#123; // 左</span><br><span class="line">stack.push(node.left);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历**(左中右  入栈顺序：左右)**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class="line">List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">if (root == null) &#123;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 定义一个用来访问的指针</span><br><span class="line">TreeNode cur = root;</span><br><span class="line">// 所指之处不为空有节点</span><br><span class="line">while (cur != null || !stack.isEmpty()) &#123;</span><br><span class="line">if (cur != null) &#123;</span><br><span class="line">stack.push(cur); // 找到对应节点入栈</span><br><span class="line">cur = cur.left; // 左 继续</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 左节点取完了</span><br><span class="line">cur = stack.pop(); // 中</span><br><span class="line">result.add(cur.val); </span><br><span class="line">cur = cur.right; // 右</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历 <strong>(左右中  用先序遍历左右循序再反转结果数组 中左右-&gt;中右左-&gt;左右中)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span><br><span class="line">// 定义结果数组</span><br><span class="line">List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">// 越界问题</span><br><span class="line">if (root == null) &#123;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">// 定义栈并初始化</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">stack.push(root);</span><br><span class="line"></span><br><span class="line">while (!stack.isEmpty()) &#123;</span><br><span class="line">// 定义新节点指向栈顶</span><br><span class="line">TreeNode node = stack.pop();</span><br><span class="line"></span><br><span class="line">result.add(node.val); // 中</span><br><span class="line">if (node.left !== null) &#123; // 左</span><br><span class="line">stack.push(node.left);</span><br><span class="line">&#125;</span><br><span class="line">if (node.right !== null) &#123; // 右</span><br><span class="line">stack.push(node.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Collections.reverse(result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的递归遍历</title>
      <link href="/icesoda105.github.io/2022/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/"/>
      <url>/icesoda105.github.io/2022/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<ul><li><p>递归算法的三要素：</p><ul><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>确定单层递归的逻辑</li></ul></li><li><p>前序遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span><br><span class="line">List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();</span><br><span class="line">preorder(root,result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void preorder(TreeNode root,List&lt;Integer&gt; result) &#123;</span><br><span class="line">if (root == null) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">result.add(root.val);</span><br><span class="line">preorder(root.left,result);</span><br><span class="line">preorder(root.right,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中序遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class="line">// 定义结果数组</span><br><span class="line">List&lt;Integer&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">// 将头结点和结果加入递归函数</span><br><span class="line">inorder(root,result);</span><br><span class="line">// 返回值</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void inorder(TreeNode root,List&lt;Integer&gt; result) &#123;</span><br><span class="line">// 递归结束条件</span><br><span class="line">if (root == null) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">inorder(root.left,result);</span><br><span class="line">result.add(root,val);</span><br><span class="line">inorder(root.right,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后序遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span><br><span class="line">List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();</span><br><span class="line">postorder(root,result);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void postorder(TreeNode root,List&lt;Integer&gt; result) &#123;</span><br><span class="line">if (root == null) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">preorder(root.left,result);</span><br><span class="line">preorder(root.right,result);</span><br><span class="line">result.add(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/icesoda105.github.io/2022/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/icesoda105.github.io/2022/08/27/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<ul><li><p>主要形式：<strong>满二叉树</strong>(2^k - 1)和<strong>完全二叉树</strong>(2^(k - 1))</p></li><li><p><strong>优先级队列</strong>其实是一个<strong>堆</strong>，堆就是一颗完全二叉树，同时保证父子节点的顺序关系</p></li><li><p>前面的树都是没有数值的，而<strong>二叉搜索树</strong>是有数值的，是一个有序树</p><ul><li>若它的左子树不为空，则左子树上所有的节点值均小于它根节点的值</li><li>若它的右子树不为空，同理</li><li>它的左右子树也分别为二叉排序树</li></ul></li><li><p><strong>平衡二叉搜索树</strong> AVL树 空树或左右子树高度差绝对值不超过1</p></li><li><p>二叉树存储方式：<strong>链式存储(指针)</strong>  顺序存储(数组)</p></li><li><p>父节点的下标为i 则左孩子<code>i*2+1</code> 右孩子<code>i*2+2</code></p></li><li><p>遍历方式：</p><ul><li>深度优先遍历：先往深走，遇到叶子节点再往回走<ul><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ul></li><li>广度优先遍历：一层一层去遍历<ul><li>层序遍历（迭代法）</li></ul></li></ul></li><li><p>定义二叉树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line">int val;</span><br><span class="line">TreeNode left;</span><br><span class="line">TreeNode right;</span><br><span class="line">TreeNode() &#123;&#125;</span><br><span class="line">TreeNode(int val) &#123;</span><br><span class="line">this.val = val;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode(int val,TreeNode left,TreeNode right) &#123;</span><br><span class="line">this.val = val;</span><br><span class="line">this.left = left;</span><br><span class="line">this.right = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 347.前 K 个高频元素</title>
      <link href="/icesoda105.github.io/2022/08/27/LeeCode-347-%E5%89%8D-K-%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/"/>
      <url>/icesoda105.github.io/2022/08/27/LeeCode-347-%E5%89%8D-K-%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素</p><p>&#x2F;&#x2F; 对频率进行排序 使用容器适配器 优先级队列</p><p>​    &#x2F;&#x2F; 优先级队列 就是一个披着队列外衣的堆 对外接口只是从队头取元素，从队尾添加元素</p><p>​    &#x2F;&#x2F; 优先级队列内部元素是自动按照元素的权值排列</p><p>​    &#x2F;&#x2F; 缺省情况下priority_queue利用max-heap（大顶堆）完成对元素的排序</p><p>​    &#x2F;&#x2F; 这个大顶堆是以vector为表现形式的complete binary tree（完全二叉树）</p><p>​    &#x2F;&#x2F; 堆是一颗完全二叉树 树中的每个节点的值都不小于或不大于其左右孩子的值</p><p>​    &#x2F;&#x2F; 如果父节点是大于等于左右孩子的就是大顶堆 反之小顶堆</p><p>​    &#x2F;&#x2F; 用小顶堆 每次将最小的元素弹出 最后积累的就是前K个最大元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="comment">// 存结果</span></span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="comment">// 定义一个哈希表存值频率</span></span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 1. 统计每个数的频率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="comment">// hash.put(c,hash.getOrDefault(c,0)+1); //若没有就是0，若有就是原有值增一。</span></span><br><span class="line">        map.put(num,map.getOrDefault(num,<span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map有一个方法叫做entrySet,这方法可以将Map的键值对的映射关系作为set集合的元素存储到Set集合当中，</span></span><br><span class="line">    <span class="comment">// 而这种映射关系的类型就是Entry的类型。</span></span><br><span class="line">    <span class="comment">// 因此可以通过使用Getkey()和getvalue()两个方法得到Set中存储的键和值。</span></span><br><span class="line"></span><br><span class="line">    Set&lt;Map.Entry&lt;Integer,Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">    <span class="comment">// 2. 根据map的value值 构建一个大顶堆</span></span><br><span class="line">    PriorityQueue&lt;Map.Entry&lt;Integer,Integer&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1,o2) -&gt; (o2.getValue() - o1.getValue())); </span><br><span class="line">    <span class="comment">// 3. 遍历记录好数值频率的哈希表 放进大顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry : entries) &#123;</span><br><span class="line">        queue.offer(entry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以k为界限 获取k个最高频率的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">        result[i] = queue.poll().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 239. 滑动窗口最大值</title>
      <link href="/icesoda105.github.io/2022/08/27/LeeCode-239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/icesoda105.github.io/2022/08/27/LeeCode-239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回 滑动窗口中的最大值 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// 队列一进一出维护窗口内元素 单调队列（单调递减） </span></span><br><span class="line">        <span class="comment">// 由大到小(队列元素排队，将最大值放在出口)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个单调队列</span></span><br><span class="line">        ArrayDeque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 存取最大值 个数为：n-k+1</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// i为nums下标 要在[i - k + 1,i]中选到最大值，只需要保证两点</span></span><br><span class="line">            <span class="comment">// 1. 队列头结点需要在此范围内（每个滑动窗口内） 不符合弹出</span></span><br><span class="line">            <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; deque.peek() &lt; i - k + <span class="number">1</span>) &#123;</span><br><span class="line">                deque.poll();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 既然是单调 就要保证每次放进去的数字要比末尾的都大  否则弹出</span></span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) &#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 筛选后入队列</span></span><br><span class="line">            deque.offer(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当i增长到满足第一个滑动窗口范围的时候，每滑动一步就将队列头结点记录在res里</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">                res[index++] = nums[deque.peek()];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 150. 逆波兰表达式求值</title>
      <link href="/icesoda105.github.io/2022/08/22/LeeCode-150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
      <url>/icesoda105.github.io/2022/08/22/LeeCode-150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的算符包括 +、-、*、&#x2F; 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>注意 两个整数之间的除法只保留整数部分。</p><p>可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">    <span class="comment">// 逆波兰表达式相当于是二叉树中的后序遍历</span></span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">        <span class="comment">// 判断字符串是否相等 </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="comment">// 遇到加号，两数出栈做加法</span></span><br><span class="line">            stack.push(stack.pop() + stack.pop());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="comment">// 遇到减号，两数出栈做减法(因为先进后出需要逆序)</span></span><br><span class="line">            stack.push( - stack.pop() + stack.pop());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="comment">// 遇到乘号，两数出栈做乘法</span></span><br><span class="line">            stack.push(stack.pop() * stack.pop());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/&quot;</span>.equals(s)) &#123;</span><br><span class="line">            <span class="comment">// 遇到除号，两数出栈做除法(先进后出逆序安排)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp2</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            stack.push(temp2 / temp1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 类型转换：字符串-&gt;int</span></span><br><span class="line">            stack.push(Integer.valueOf(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode. 1047. 删除字符串中的所有相邻重复项</title>
      <link href="/icesoda105.github.io/2022/08/15/LeeCode-1047-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/icesoda105.github.io/2022/08/15/LeeCode-1047-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 继续消消乐</span></span><br><span class="line">        <span class="comment">// 使用Deque作为堆栈</span></span><br><span class="line">        <span class="comment">// ArrayDeque会比LinkedList在除了删除元素这一点外会快一点</span></span><br><span class="line">        ArrayDeque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 空队列 或 不匹配时入栈</span></span><br><span class="line">            <span class="keyword">if</span> (deque.isEmpty() || deque.peek() != ch) &#123;</span><br><span class="line">                deque.push(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 匹配时消除</span></span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 收集剩余元素</span></span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            str = deque.pop() + str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用字符串直接作为栈 省去栈转为字符串的操作</span></span><br><span class="line">        <span class="comment">// 将res当做栈</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">// res的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">// 当top &gt;0 即栈中有字符时，当前字符如果和栈中字符相等，弹出栈顶字符</span></span><br><span class="line">            <span class="keyword">if</span> (top &gt;= <span class="number">0</span> &amp;&amp; res.charAt(top) == c) &#123;</span><br><span class="line">                res.deleteCharAt(top);</span><br><span class="line">                top--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则 将该字符入栈</span></span><br><span class="line">                res.append(c);</span><br><span class="line">                top++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双指针</span></span><br><span class="line">    <span class="type">char</span>[] ch = s.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; s.length()) &#123;</span><br><span class="line">        <span class="comment">// 直接用fast指针覆盖slow指针的值</span></span><br><span class="line">        ch[slow] = ch[fast]; </span><br><span class="line">        <span class="comment">// 遇到前后相同值得 就跳过 slow后退一步 下次循环就可以直接覆盖掉</span></span><br><span class="line">        <span class="keyword">if</span> (slow &gt; <span class="number">0</span> &amp;&amp; ch[slow] == ch[slow - <span class="number">1</span>]) &#123;</span><br><span class="line">            slow--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回一个新的字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch,<span class="number">0</span>,slow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode. 20. 有效的括号</title>
      <link href="/icesoda105.github.io/2022/08/15/LeeCode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
      <url>/icesoda105.github.io/2022/08/15/LeeCode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个字符型双向队列</span></span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义匹配入栈规则及遍历出栈消消乐</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">            <span class="comment">// 将字符串转换为字符</span></span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            deque.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果队列里有字符 且字符不匹配</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deque.isEmpty() || deque.peek() != ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 如果是右括号判断是否和栈顶元素匹配 相同则消除</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode. 225. 用队列实现栈</title>
      <link href="/icesoda105.github.io/2022/08/15/LeeCode-225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
      <url>/icesoda105.github.io/2022/08/15/LeeCode-225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">// 两个队列模拟一个栈</span></span><br><span class="line">    Queue&lt;Integer&gt; que1;</span><br><span class="line">    Queue&lt;Integer&gt; que2; <span class="comment">// 辅助队列 用来备份</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        que1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        que2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        que2.offer(x); <span class="comment">// 先放在辅助队列中</span></span><br><span class="line">        <span class="keyword">while</span> (!que1.isEmpty()) &#123;</span><br><span class="line">            que2.offer(que1.poll());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换 放进que1中</span></span><br><span class="line">        Queue&lt;Integer&gt; queueTemp;</span><br><span class="line">        queueTemp = que1;</span><br><span class="line">        que1 = que2;</span><br><span class="line">        que2 = queueTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用两个Deque实现一个栈</span></span><br><span class="line">    <span class="comment">// Deque接口继承了Queue接口</span></span><br><span class="line">    <span class="comment">// 所以Queue中的add、poll、peek等效于Deque中的addLast、pollFirst、peekFirst</span></span><br><span class="line">    Deque&lt;Integer&gt; que1;</span><br><span class="line">    Deque&lt;Integer&gt; que2; <span class="comment">// 辅助队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        que1 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        que2 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        que1.addLast(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que1.size();</span><br><span class="line">        <span class="comment">// 将que1导入que2 但是留下最后一个值</span></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            que2.addLast(que1.peekFirst());</span><br><span class="line">            que1.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> que1.pollFirst();</span><br><span class="line">        <span class="comment">// 将que2对象的引用赋给了que1 此时que1 que2指向同一个队列</span></span><br><span class="line">        que1 = que2;</span><br><span class="line">        <span class="comment">// 如果直接操作que2 que1也会收到影响 所以为que2分配一个新的空间</span></span><br><span class="line">        que2 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.peekLast();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一个deque实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">// Deque 接口继承了 Queue 接口</span></span><br><span class="line">    <span class="comment">// 所以 Queue 中的 add、poll、peek等效于 Deque 中的 addLast、pollFirst、peekFirst</span></span><br><span class="line">    Deque&lt;Integer&gt; que1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        que1 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        que1.addLast(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> que1.size();</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">// 将 que1 导入 que2 ，但留下最后一个值</span></span><br><span class="line">        <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            que1.addLast(que1.peekFirst());</span><br><span class="line">            que1.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> que1.pollFirst();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.peekLast();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> que1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode. 232. 用栈实现队列</title>
      <link href="/icesoda105.github.io/2022/08/14/LeeCode-232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/icesoda105.github.io/2022/08/14/LeeCode-232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p><p>实现 MyQueue 类：</p><p>void push(int x) 将元素 x 推到队列的末尾<br>int pop() 从队列的开头移除并返回元素<br>int peek() 返回队列开头的元素<br>boolean empty() 如果队列为空，返回 true ；否则，返回 false<br>说明：</p><p>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek&#x2F;pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="comment">// 使用栈来模拟队列的行为，如果仅仅用一个栈，是一定不行的，所以需要两个栈一个输入栈，一个输出栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责进栈</span></span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); <span class="comment">// 负责出栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn(); <span class="comment">// 调用辅助函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">out</span> <span class="operator">=</span> stackOut.pop();</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn(); <span class="comment">// 调用辅助函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">out</span> <span class="operator">=</span> stackOut.peek();</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">i</span> <span class="operator">=</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助函数</span></span><br><span class="line">    <span class="comment">// 如果出栈里为空 那么将入栈中的元素全部放出栈中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpstackIn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty()) &#123;</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="/icesoda105.github.io/2022/08/14/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/icesoda105.github.io/2022/08/14/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><strong>队列的定义：</strong></p><ul><li><p>队列简称队，也是一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。向队列中插入元素称为入队或进队；删除元素称为出队或离队。</p></li><li><p><strong>队头(Front)<strong>：</strong>允许删除</strong>的一端，又称为队首。</p><p><strong>队尾(Rear)<strong>：</strong>允许插入</strong>的一端。</p><p><strong>空队列：不含任何元素的空表。</strong></p></li><li><p>队列的基本操作<br>InitQueue(&amp;Q)：初始化队列，构造一个空队列Q。</p><p>QueueEmpty(Q)：判队列空，若队列Q为空返回true，否则返回false。</p><p>EnQueue(&amp;Q, x)：入队，若队列Q未满，将x加入，使之成为新的队尾。</p><p>DeQueue(&amp;Q, &amp;x)：出队，若队列Q非空，删除队头元素，并用x返回。</p><p>GetHead(Q, &amp;x)：读队头元素，若队列Q非空，则将队头元素赋值给X。</p><p>需要注意的是，队列是操作受限的线性表，所以，不是任何对线性表的操作都可以作为队列的操作。比如，不可以随便读取队列中间的某个数据。</p></li><li><p>Queue是java中实现<a href="https://so.csdn.net/so/search?q=%E9%98%9F%E5%88%97&spm=1001.2101.3001.7020">队列</a>的接口，它总共只有6个方法，我们一般只用其中3个就可以了。Queue的实现类有LinkedList和PriorityQueue。最常用的实现类是LinkedList。</p></li><li><p><strong>压入元素(添加)：add()、offer()</strong><br>相同：未超出容量，从队尾压入元素，返回压入的那个元素。<br>区别：在超出容量时，add()方法会对抛出异常，offer()返回false</p><p><strong>弹出元素(删除)：remove()、poll()</strong></p></li></ul><p>相同：容量大于0的时候，删除并返回队头被删除的那个元素。<br>  区别：在容量为0的时候，remove()会抛出异常，poll()返回false</p><p>  <strong>获取队头元素(不删除)：element()、peek()</strong><br>  相同：容量大于0的时候，都返回队头元素。但是不删除。<br>  区别：容量为0的时候，element()会抛出异常，peek()返回null。</p><ul><li><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/image-20220815085855008.png" alt="image-20220815085855008"></li></ul><blockquote><ol><li>C++中stack 是容器么？</li><li>我们使用的stack是属于哪个版本的STL？</li><li>我们使用的STL中stack是如何实现的？</li><li>stack 提供迭代器来遍历stack空间么？</li></ol></blockquote><p>​栈和队列是STL(C++标准库)里面的两个数据结构。</p><p>​C++标准库有多个版本，要知道我们使用的STL是哪个版本，才能知道对应的栈和队列的实现原理。</p><p>三个最为普遍的STL版本：</p><blockquote><ol><li>HP STL 其他版本的C++ STL，一般是以HP STL为蓝本实现出来的，HP STL是C++ STL的第一个实现版本，而且开放源代码。</li><li>P.J.Plauger STL 由P.J.Plauger参照HP STL实现出来的，被Visual C++编译器所采用，不是开源的。</li><li>SGI STL 由Silicon Graphics Computer Systems公司参照HP STL实现，被Linux的C++编译器GCC所采用，SGI STL是开源软件，源码可读性甚高。</li></ol></blockquote><p>​栈和队列也是SGI STL里面的数据结构， 知道了使用版本，才知道对应的底层实现。</p><p>​栈提供push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器(iterator)。 不像是set 或者map 提供迭代器iterator来遍历所有元素。</p><p>​<strong>栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。</strong></p><p>​所以STL中栈往往不被归类为容器，而被归类为container adapter（容器适配器）。</p><p>​<strong>栈的内部结构，栈的底层实现可以是vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。</strong></p><p>​<strong>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的低层结构。</strong></p><p>​deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了</p><p>​<strong>SGI STL中 队列底层实现缺省情况下一样使用deque实现的。</strong></p><p>​我们也可以指定vector为栈的底层实现，初始化语句如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::stack&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt; &gt; third;  <span class="comment">// 使用vector为底层容器的栈</span></span><br></pre></td></tr></table></figure><p>​队列中先进先出的数据结构，同样不允许有遍历行为，不提供迭代器, <strong>SGI STL中队列一样是以deque为缺省情况下的底部结构。</strong></p><p>也可以指定list 为起底层实现，初始化queue的语句如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>, std::list&lt;<span class="type">int</span>&gt;&gt; third; <span class="comment">// 定义以list为底层容器的队列</span></span><br></pre></td></tr></table></figure><p>所以STL 队列也不被归类为容器，而被归类为container adapter（ 容器适配器）。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/icesoda105/PicgoWorkspace/img/1.png" alt="1"></p><p>![img](D:&#x2F;Program Files&#x2F;Typora&#x2F;resources&#x2F;image&#x2F;FM6EX4N3N{B{F@BY[41}GLS.png)</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ex2. 随机排序</title>
      <link href="/icesoda105.github.io/2022/08/12/Ex2-%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/Ex2-%E9%9A%8F%E6%9C%BA%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ex1. 睡眠排序</title>
      <link href="/icesoda105.github.io/2022/08/12/Ex1-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/Ex1-%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-10.基数排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-10-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-10-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">radixSort</span> &#123;</span><br><span class="line"><span class="comment">// 基数排序法是属于稳定性的排序，基数排序法是效率高的稳定排序法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> d)</span> &#123;</span><br><span class="line"><span class="comment">// 看num从右往左第n位 相同的放进一个桶里  初始从个位开始</span></span><br><span class="line"><span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="comment">// 因为每位数字一定是0~9 所以设置十个基于位数的桶</span></span><br><span class="line"><span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][len];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录各桶放了多少个数字</span></span><br><span class="line"><span class="type">int</span>[] order = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line"><span class="comment">// d是指最大位数</span></span><br><span class="line"><span class="keyword">while</span> (bit &lt; d) &#123;</span><br><span class="line"><span class="comment">// 1. 进行第一轮 个位分桶</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line"><span class="comment">// 获取所需位数上的数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> (num / bit) % <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 把完整数值入对应队列（底层数据结构）</span></span><br><span class="line">bucket[digit][order[digit]] = num;</span><br><span class="line"><span class="comment">// 记录对应桶里的个数</span></span><br><span class="line">order[digit]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 进行一轮排序</span></span><br><span class="line"><span class="comment">// 用于遍历原数组</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 按照桶号遍历桶</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">// 桶个数做跳出边界</span></span><br><span class="line"><span class="keyword">if</span> (order[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; order[i]; j++) &#123;</span><br><span class="line">nums[k] = bucket[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">order[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bit *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1234</span>,<span class="number">1005</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">234</span>&#125;;</span><br><span class="line">sort(nums,<span class="number">10000</span>);</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-9.桶排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-9-%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-9-%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">binSort</span> &#123;</span><br><span class="line"><span class="comment">// 分治思想</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">float</span>[] nums)</span> &#123;</span><br><span class="line"><span class="comment">// 1. 分桶：初始化桶</span></span><br><span class="line"><span class="comment">// 由于桶元素会频繁插入，所以选择LinkedList作为桶的数据结构</span></span><br><span class="line"><span class="comment">// 桶的集合</span></span><br><span class="line">ArrayList&lt;LinkedList&lt;Float&gt;&gt; buckets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;LinkedList&lt;Float&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">buckets.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Float&gt;()); <span class="comment">// 添加桶</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 各桶排序：数据放入桶中并完成排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">float</span> data : nums) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getBucketIndex(data); <span class="comment">// 哪个桶</span></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">insertSort(buckets.get(index),data); <span class="comment">// 桶编号 数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 归位：从桶取出数据，放回nums</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (LinkedList&lt;Float&gt; bucket : buckets) &#123;</span><br><span class="line"><span class="keyword">for</span> (Float data : bucket) &#123;</span><br><span class="line">nums[index++] = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算得到输入元素应该放到哪个桶内</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBucketIndex</span><span class="params">(<span class="type">float</span> data)</span> &#123;</span><br><span class="line"><span class="comment">// 这里仅使用浮点数的整数作为桶的索引值</span></span><br><span class="line"><span class="comment">// 实际开发具体设计</span></span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择插入排序作为各个桶内元素排序的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(List&lt;Float&gt; bucket,<span class="type">float</span> data)</span> &#123;</span><br><span class="line">ListIterator&lt;Float&gt; it = bucket.listIterator();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">insertFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"><span class="keyword">if</span> (data &lt;= it.next()) &#123;</span><br><span class="line"><span class="comment">// 把迭代器的位置偏移回上一个位置</span></span><br><span class="line">it.previous();</span><br><span class="line"><span class="comment">// 把数据插入到迭代器的当前位置</span></span><br><span class="line">it.add(data);</span><br><span class="line"></span><br><span class="line">insertFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (insertFlag) &#123;</span><br><span class="line"><span class="comment">// 否则把数据插入到链表末端</span></span><br><span class="line">bucket.add(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">float</span>[] nums = <span class="keyword">new</span> <span class="title class_">float</span>[] &#123;<span class="number">0.12f</span>,<span class="number">9.9f</span>,<span class="number">2.6f</span>,<span class="number">5.2f</span>,<span class="number">3.5f</span>,<span class="number">6.3f</span>,<span class="number">9.6f</span>,<span class="number">7.7f</span>,<span class="number">1.5f</span>,<span class="number">2.2f</span>&#125;;</span><br><span class="line"></span><br><span class="line">sort(nums);</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-8.计数排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-8-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-8-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">countSort</span> &#123;</span><br><span class="line"><span class="comment">// 借助足够大的辅助数组 把数字排在一个相对位置不会错的地方，最后并拢</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> min,<span class="type">int</span> max)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表 计数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">// 将当前值与最小值的差值作为下标</span></span><br><span class="line">temp[nums[i] - min]++;</span><br><span class="line"><span class="comment">// ++值作为个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 用于并拢</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> temp[i]; <span class="comment">// 每轮个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cnt != <span class="number">0</span>) &#123;</span><br><span class="line">nums[index] = i + min;</span><br><span class="line">index++;</span><br><span class="line">cnt--; <span class="comment">// 个数--</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">sort(nums,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-7.堆排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-7-%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-7-%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">heapSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] list)</span> &#123;</span><br><span class="line"><span class="comment">// 自底向上</span></span><br><span class="line"><span class="comment">// 将所给的无序数组构造初始堆 进而调整为大顶堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (list.length) / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 调整堆</span></span><br><span class="line">heapAdjust(list,list.length,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心排序</span></span><br><span class="line"><span class="comment">// 将最大的节点list[0]放在堆尾list[i]</span></span><br><span class="line"><span class="comment">// 然后从根节点开始调整</span></span><br><span class="line"><span class="comment">// 每次把最后一个排好的另外放好（丢掉）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> list[<span class="number">0</span>];</span><br><span class="line">list[<span class="number">0</span>] = list[i];</span><br><span class="line">list[i] = temp;</span><br><span class="line"><span class="comment">// 调整堆</span></span><br><span class="line">heapAdjust(list,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整堆</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapAdjust</span><span class="params">(<span class="type">int</span>[] list,<span class="type">int</span> len,<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// 当前节点的左孩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把较小的沉下去 较大的提上来</span></span><br><span class="line"><span class="comment">// 使得最大值总是在最顶上三个里面产生</span></span><br><span class="line"><span class="keyword">while</span> (index &lt; len) &#123; <span class="comment">// 不越界</span></span><br><span class="line"><span class="comment">// index 指向左右孩子中较大的那个</span></span><br><span class="line"><span class="keyword">if</span> (index + <span class="number">1</span> &lt; len) &#123; <span class="comment">// 有右孩子</span></span><br><span class="line"><span class="comment">// 左孩子小于右孩子</span></span><br><span class="line"><span class="keyword">if</span> (list[index] &lt; list[index + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 让index指向左右孩子中较大的那个</span></span><br><span class="line">index = index + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较交换大孩子和根节点</span></span><br><span class="line"><span class="comment">// 大孩子大于父节点 交换</span></span><br><span class="line"><span class="keyword">if</span> (list[index] &gt; list[i]) &#123;</span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> list[i];</span><br><span class="line">list[i] = list[index];</span><br><span class="line">list[index] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 下一个判断</span></span><br><span class="line">i = index;</span><br><span class="line">index = <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// index 指向孩子的孩子 继续</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>&#125;;</span><br><span class="line">sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-6.快速排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-6-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-6-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">quickSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span> &#123;</span><br><span class="line"><span class="comment">// 终止条件</span></span><br><span class="line"><span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> start;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> end;</span><br><span class="line"><span class="comment">// 左边模拟空位</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[left];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 极端两头比较</span></span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] &gt;= temp)</span><br><span class="line"><span class="comment">// 位置符合，右边继续走</span></span><br><span class="line">right--;</span><br><span class="line"><span class="comment">// 不符合则放到左空位，让出右空位</span></span><br><span class="line">nums[left] = nums[right];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= temp)</span><br><span class="line">left++;</span><br><span class="line"><span class="comment">// 不符合则放到右空位，让出左空位</span></span><br><span class="line">nums[right] = nums[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// left == right 把标记点放入</span></span><br><span class="line">nums[left] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归 以left/right为边界 左边是小 右边是大</span></span><br><span class="line">sort(nums,start,left - <span class="number">1</span>);</span><br><span class="line">sort(nums,left + <span class="number">1</span>,end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">sort(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-5.归并排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-5-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-5-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mergeSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 一直拆分</span></span><br><span class="line">sort(nums,start,mid);</span><br><span class="line">sort(nums,mid + <span class="number">1</span>,end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序数组</span></span><br><span class="line">merge(nums,start,end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"><span class="comment">// 暂存有序结果</span></span><br><span class="line"><span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 两个分组的首地址</span></span><br><span class="line"><span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> start;</span><br><span class="line"><span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i初始化为start 为了与原数组位置一一对应</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= end) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[p1] &lt;= nums[p2])</span><br><span class="line">tmp[i++] = nums[p1++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tmp[i++] = nums[p2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有一组排完的情况</span></span><br><span class="line"><span class="keyword">while</span> (p1 &lt;= mid) &#123;</span><br><span class="line">tmp[i++] = nums[p1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p2 &lt;= end) &#123;</span><br><span class="line">tmp[i++] = nums[p2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还给原数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start; j &lt;= end; j++) &#123;</span><br><span class="line">nums[j] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">sort(nums,<span class="number">0</span>,nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-4.希尔排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-4-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-4-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shellSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="comment">// 分组 + 比较 + 排序</span></span><br><span class="line"><span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 始终保持j位于分组后面的元素位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> gap; j &lt; n; j++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前后对应比较 前面大的话放到后面去</span></span><br><span class="line"><span class="keyword">while</span> ((i &gt;= gap &amp;&amp; nums[i - gap] &gt; nums[i])) &#123;</span><br><span class="line"><span class="comment">// 冒泡</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">nums[i] = nums[i - gap];</span><br><span class="line">nums[i - gap] = temp;</span><br><span class="line"><span class="comment">// 保证间隔分组实现排序</span></span><br><span class="line">i -= gap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gap = gap / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">6</span>&#125;;</span><br><span class="line">sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-3.插入排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-3-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-3-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">insertSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="type">int</span> pos, cur;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123; <span class="comment">// 第一张牌 i = 0 在手里，从第二张牌开始摸</span></span><br><span class="line">pos = i - <span class="number">1</span>; <span class="comment">// pos为有序地区域元素与无序区域元素比较</span></span><br><span class="line"><span class="comment">// 用一个变量cur存放关键字</span></span><br><span class="line">cur = nums[i]; <span class="comment">// 当前摸的牌</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pos循环遍历有序元素找到小于摸到牌的元素</span></span><br><span class="line"><span class="keyword">while</span> (pos &gt;= <span class="number">0</span> &amp;&amp; cur &lt; nums[pos]) &#123; <span class="comment">// 摸到的牌小于手里的牌</span></span><br><span class="line"><span class="comment">// 手里牌右移一位</span></span><br><span class="line">nums[pos + <span class="number">1</span>] = nums[pos];</span><br><span class="line">pos--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直到定位到，以及直接找到大牌就放到下一个位置</span></span><br><span class="line">nums[pos + <span class="number">1</span>] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">9</span>&#125;;</span><br><span class="line">sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-2.选择排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>思路：找最小的元素，放在最终的位置</p><p>遍历交换更新最小值</p><p>特点：非稳定排序 O(n2)</p><p>使用：数据量少</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">selectSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123; <span class="comment">// 当前位置元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123; <span class="comment">// 从i+1开始找最值</span></span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;</span><br><span class="line">minIndex = j; <span class="comment">// 更新最小值下标</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">nums[i] = nums[minIndex];</span><br><span class="line">nums[minIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">sort(nums);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十大排序-1.冒泡排序</title>
      <link href="/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/icesoda105.github.io/2022/08/12/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F-1-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>比较交换相邻元素</p><p><strong>temp   j &lt; n - i - 1</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bubbleSort</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123; <span class="comment">// 控制比较轮次 一共i-1次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] &lt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">sort(nums);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 十大排序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 84. 柱状图中最大的矩形</title>
      <link href="/icesoda105.github.io/2022/08/08/LeeCode-84-%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/"/>
      <url>/icesoda105.github.io/2022/08/08/LeeCode-84-%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 双指针 两头开工 超出时间限制</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> heights.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">for</span> (;left &gt;= <span class="number">0</span>;left--) &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (heights[left] &lt; heights[i]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">for</span> (;right &lt;len;right++) &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (heights[right] &lt; heights[i]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> right - left - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> heights[i];</span><br><span class="line"></span><br><span class="line">​      sum = Math.max(sum,w * h);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 动态规划</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> heights.length;</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span>[] minLeftIndex = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span>[] maxRightIndex = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 记录左边第一个小于该柱子的下标</span></span><br><span class="line"></span><br><span class="line">​    minLeftIndex[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 要考虑左边 起始就为1</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> i - <span class="number">1</span>; <span class="comment">// 左边</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 不断向右寻找</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; heights[l] &gt;= heights[i]) l = minLeftIndex[l];</span><br><span class="line"></span><br><span class="line">​      minLeftIndex[i] = l;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 记录右边第一个小于该柱子的下标</span></span><br><span class="line"></span><br><span class="line">​    maxRightIndex[len - <span class="number">1</span>] = len;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 不断向左寻找</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">while</span> (r &lt; len &amp;&amp; heights[r] &gt;= heights[i]) r = maxRightIndex[r];</span><br><span class="line"></span><br><span class="line">​      maxRightIndex[i] = r;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 求和</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 目标值即为对应基准上所对应的面积大小 5——10,6——6</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 找到俩小 中间部分一定为大 可覆盖区域</span></span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> heights[i] * (maxRightIndex[i] - minLeftIndex[i] - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​      result = Math.max(sum,result);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 单调栈 头底 从大到小</span></span><br><span class="line"></span><br><span class="line">​    Stack&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> heights.length;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 数组扩容 在头和尾各加入一个元素</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span>[] newHeights = <span class="keyword">new</span> <span class="title class_">int</span>[len + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 左右测试 始末初始化</span></span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    newHeights[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    newHeights[newHeights.length - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 重新遍历分配</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">​      newHeights[i + <span class="number">1</span>] = heights[i];</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 扩容后的数组还给原数组</span></span><br><span class="line"></span><br><span class="line">​    heights = newHeights;</span><br><span class="line"></span><br><span class="line">​    len = newHeights.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    st.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 当前大于前一个柱子入栈</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (heights[i] &gt; heights[st.peek()]) &#123;</span><br><span class="line"></span><br><span class="line">​        st.push(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heights[i] == heights[st.peek()]) &#123;</span><br><span class="line"></span><br><span class="line">​        st.pop();</span><br><span class="line"></span><br><span class="line">​        st.push(i);</span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; heights[i] &lt; heights[st.peek()]) &#123;</span><br><span class="line"></span><br><span class="line">​          <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> st.peek();</span><br><span class="line"></span><br><span class="line">​          st.pop();</span><br><span class="line"></span><br><span class="line">​          <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> st.peek();</span><br><span class="line"></span><br><span class="line">​          <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">​          <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> right - left - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​          <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> heights[mid];</span><br><span class="line"></span><br><span class="line">​          result = Math.max(result,w * h);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        st.push(i);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 42. 接雨水</title>
      <link href="/icesoda105.github.io/2022/08/08/LeeCode-42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
      <url>/icesoda105.github.io/2022/08/08/LeeCode-42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 双指针</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 第一个指针指向当前柱子</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; height.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 首尾柱子不接雨水 免测</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (i == <span class="number">0</span> || i == height.length - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 初始都为所在柱子高度 动态变化的</span></span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">rHeight</span> <span class="operator">=</span> height[i]; <span class="comment">// 记录右边柱子的最高高度</span></span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">lHeight</span> <span class="operator">=</span> height[i]; <span class="comment">// 记录左边柱子的最高高度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 第二个指针指向前后柱子</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 遍历更新右柱子最高高度</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> i + <span class="number">1</span>;r &lt; height.length;r++) &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (height[r] &gt; rHeight) rHeight = height[r]; </span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 遍历更新左柱子最高高度</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> i - <span class="number">1</span>;l &gt;= <span class="number">0</span>;l--) &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (height[l] &gt; lHeight) lHeight = height[l];</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 左右柱子取最小与当前柱子相减</span></span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> Math.min(lHeight,rHeight) - height[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 动态累加</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (h &gt; <span class="number">0</span>) sum += h;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 动态规划</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 当前列雨水面积：min(左边柱子的最高高度，记录右边柱子的最高高度) - 当前柱子高度。</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span>[] maxLeft = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span>[] maxRight = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 记录每个柱子左边柱子最大高度</span></span><br><span class="line"></span><br><span class="line">​    maxLeft[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; len;i++) </span><br><span class="line"></span><br><span class="line">​      maxLeft[i] = Math.max(height[i],maxLeft[i-<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 记录每个柱子右边柱子最大高度</span></span><br><span class="line"></span><br><span class="line">​    maxRight[len - <span class="number">1</span>] = height[len - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--) </span><br><span class="line"></span><br><span class="line">​      maxRight[i] = Math.max(height[i],maxRight[i+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 求和</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> Math.min(maxLeft[i],maxRight[i]) - height[i];</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) sum += count;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 单调栈 头底从小到大</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 栈头元素就是凹槽底部的柱子，栈头第二个元素就是凹槽左边的柱子，而添加的元素就是凹槽右边的柱子</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> height.length;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 下标入栈</span></span><br><span class="line"></span><br><span class="line">​    stack.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 右边柱子入栈判断</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; len;i++) &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="comment">// 右边柱子小则入栈</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (height[i] &lt; height[stack.peek()]) &#123;</span><br><span class="line"></span><br><span class="line">​        stack.push(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 高度相等 则弹出后者替换,高度差在即可</span></span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (height[i] == height[stack.peek()]) &#123;</span><br><span class="line"></span><br><span class="line">​        stack.pop();</span><br><span class="line"></span><br><span class="line">​        stack.push(i);</span><br><span class="line"></span><br><span class="line">​      </span><br><span class="line"></span><br><span class="line">​      <span class="comment">// 大于栈顶高度</span></span><br><span class="line"></span><br><span class="line">​      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; (height[i] &gt; height[stack.peek()])) &#123;</span><br><span class="line"></span><br><span class="line">​          <span class="comment">// 则中间值即为弹出的凹槽柱子</span></span><br><span class="line"></span><br><span class="line">​          <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> stack.pop();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​          <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="comment">// 下一栈顶即为左柱子</span></span><br><span class="line"></span><br><span class="line">​            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> stack.peek();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> Math.min(height[left],height[i]) - height[mid];</span><br><span class="line"></span><br><span class="line">​            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> i - left - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> h * w;</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">if</span> (s &gt; <span class="number">0</span>) sum += s;</span><br><span class="line"></span><br><span class="line">​          &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        stack.push(i);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 503. 下一个更大元素 II</title>
      <link href="/icesoda105.github.io/2022/08/05/LeeCode503-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-II/"/>
      <url>/icesoda105.github.io/2022/08/05/LeeCode503-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-II/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个循环数组 nums （ nums[nums.length - 1] 的下一个元素是 nums[0] ），返回 nums 中每个元素的 下一个更大元素 。</p><p>数字 x 的 下一个更大的元素 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1 。</p></blockquote><p><strong>单调栈   实现循环数组 二倍数组长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">// 循环数组 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        Arrays.fill(result,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始单调栈</span></span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 下标入栈</span></span><br><span class="line">        st.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; n * <span class="number">2</span> - <span class="number">1</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; nums[i % n] &gt; nums[st.peek()]) &#123;</span><br><span class="line">                result[st.peek()] = nums[i % n];</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(i % n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode-496. 下一个更大元素 I</title>
      <link href="/icesoda105.github.io/2022/08/04/LeeCode-496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-I/"/>
      <url>/icesoda105.github.io/2022/08/04/LeeCode-496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-I/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p><p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。</p><p>对于每个 0 &lt;&#x3D; i &lt; nums1.length ，找出满足 nums1[i] &#x3D;&#x3D; nums2[j] 的下标 j ，并且在 nums2 确定 nums2[j] 的 下一个更大元素 。如果不存在下一个更大元素，那么本次查询的答案是 -1 。</p><p>返回一个长度为 nums1.length 的数组 ans 作为答案，满足 ans[i] 是如上所述的 下一个更大元素 。</p></blockquote><p><strong>单调栈  哈希表去重</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="comment">// 单调栈 从头到底 单调递增</span></span><br><span class="line">        Stack&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 需要定义一个和nums1一样大小的数组result来存放结果</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">        <span class="comment">// 初始化为-1</span></span><br><span class="line">        Arrays.fill(res,-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 关键： 两个没有重复元素的数组 用map做映射</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把数组1的信息(下标元素，下标)录入哈希表 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums1.length;i++) &#123;</span><br><span class="line">            hashMap.put(nums1[i],i);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 栈初始下标入栈</span></span><br><span class="line">        temp.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历数组2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums2.length;i++) &#123;</span><br><span class="line">            <span class="comment">// 小于等于栈顶下标对应的值 入栈</span></span><br><span class="line">            <span class="keyword">if</span> (nums2[i] &lt;= nums2[temp.peek()]) &#123;</span><br><span class="line">                temp.add(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 大于栈顶下标对应的值</span></span><br><span class="line">                <span class="keyword">while</span> (!temp.isEmpty() &amp;&amp; nums2[temp.peek()] &lt; nums2[i]) &#123;</span><br><span class="line">                    <span class="comment">// 判断nums1中是否有这个测试值</span></span><br><span class="line">                    <span class="keyword">if</span> (hashMap.containsKey(nums2[temp.peek()])) &#123;</span><br><span class="line">                        <span class="comment">// 获取测试值所在下标</span></span><br><span class="line">                        <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> hashMap.get(nums2[temp.peek()]);</span><br><span class="line">                        <span class="comment">// 在结果数组中同步下标，记录对应目标值</span></span><br><span class="line">                        res[index] = nums2[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 弹出</span></span><br><span class="line">                    temp.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 下一个</span></span><br><span class="line">                temp.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode 739.每日温度</title>
      <link href="/icesoda105.github.io/2022/08/03/LeeCode-739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
      <url>/icesoda105.github.io/2022/08/03/LeeCode-739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p></blockquote><p>​<strong>单调栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        <span class="comment">// 从栈头到栈底递增</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lens</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span> []res = <span class="keyword">new</span> <span class="title class_">int</span>[lens];</span><br><span class="line"></span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将温度数组第一个元素下标入栈</span></span><br><span class="line">        stack.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历温度数组逐个判断入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; lens;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temperatures[i] &lt;= temperatures[stack.peek()]) &#123;</span><br><span class="line">                <span class="comment">// 小于的话直接压入栈中</span></span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 积攒栈元素循环记录 栈顶一直在更新</span></span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123;</span><br><span class="line">                    <span class="comment">// 遇到第一个大于的 取差值</span></span><br><span class="line">                    res[stack.peek()] = i - stack.peek();</span><br><span class="line">                    <span class="comment">// 记录过的弹出</span></span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 下一个值的下标入栈</span></span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 单调栈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
